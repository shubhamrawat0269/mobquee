<?xml version="1.0" encoding="utf-8"?>
<item targetClass="AddPinMarker" category="GoogleMapAction" type="MapMarker" method="AddPinMarker"
		helpLink_EN="/add_pin_marker2.htm" helpLink_JP="/act.htm#_ピンマーカー追加‌">
	<properties>
		<type name="parameters" input="None">
			<property path="params.targetPage" input="spark.components.DropDownList">
			    <validations><validation validator="RequiredValueValidator"/></validations>
			    <dataSource source="{@project:getPageCacheList()}" labelField="Title" valueField="pageid"/>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="">						
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="BaseView">						
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="ScrollView">						
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="SplitView">						
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when at="postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Name]:}" method="folded" value="false" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="params.name" input="spark.components.DropDownList">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dependentActions>
					<when at="initForm" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">					
  						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
  					</when>						
				</dependentActions>
			</property>
			<property formKey="Name" path="params.name" input="spark.components.TextInput">
				<validations><validation validator="RequiredValueValidator"/></validations>
			</property>
			
			<property path="params.markerid" input="spark.components.TextInput">
				<validations><validation validator="RequiredValueValidator"/></validations>
			</property>		
			<property path="params.title" input="spark.components.TextInput"/>
			<property path="params.subtitle" input="spark.components.TextInput"/>
			<property path="params.leftView" input="spark.components.DropDownList">
			  <dataSource>					
			  		<data name="" value ="0"/>
					<data name="DetailDiscloser" value ="0"/>
					<data name="InfoLight" value ="1"/>
					<data name="InfoDark" value ="0"/>
					<data name="ContactAdd" value ="0"/>
					<data name="Custom" value ="0"/>
				</dataSource>
			</property>
			<property path="params.rightView" input="spark.components.DropDownList">
			  <dataSource>					
					<data name="" value ="0"/>
					<data name="DetailDiscloser" value ="1"/>
					<data name="InfoLight" value ="0"/>
					<data name="InfoDark" value ="0"/>
					<data name="ContactAdd" value ="0"/>
					<data name="Custom" value ="0"/>
				</dataSource>
			</property>
			<property path="params.canShowCallout" input="spark.components.CheckBox"/>
			<property path="params.address" input="spark.components.TextArea" heightInLines="2"/>
			<property path="params.lattitude" input="spark.components.TextInput"/>
			<property path="params.longitude" input="spark.components.TextInput"/>
		</type>
		<type name="condition" input="HRule">
			<property path="params.condition" input="LabelWithButton"/>
		</type>
		<type name="resultEvents" input="HRule">
			<property path="actions.success" input="LabelWithButton"/>
			<property path="actions.error" input="LabelWithButton"/>
			<property path="actions.LeftButtonClicked" input="LabelWithButton"/>
			<property path="actions.RightButtonClicked" input="LabelWithButton"/>
		</type>
	</properties>
</item>