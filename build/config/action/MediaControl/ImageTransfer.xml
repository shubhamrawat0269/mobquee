<?xml version="1.0" encoding="utf-8"?>
<item targetClass="ImageTransfer" category="MediaAction" type="Media" method="ImageTransfer"
	  helpLink_EN="" helpLink_JP="">
	
	<properties>
		
		<type name="From">					
    		<property path="params.fromSource" dataType="array" input="spark.components.DropDownList" init="localFile">
				<validations><validation validator="RequiredValueValidator"/></validations>
			    <dataSource>
					<data name="localFile"/>
					<data name="screen image"/>
					<data name="library"/>
					<data name="remoteFile"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[params.fromSource]:value}" compareBy="EQ" compareWith="" at="initForm, postCommit">
						<action target="{@form[params.fromFilename]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.fromFileid]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.targetPage]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[params.fromSource]:value}" compareBy="EQ" compareWith="localFile" at="initForm, postCommit">
						<action target="{@form[params.fromFilename]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.fromFileid]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.targetPage]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[params.fromSource]:value}" compareBy="EQ" compareWith="screen image" at="initForm, postCommit">
						<action target="{@form[params.fromFilename]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.fromFileid]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.targetPage]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[params.fromSource]:value}" compareBy="EQ" compareWith="remoteFile" at="initForm, postCommit">
						<action target="{@form[params.fromFilename]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.fromFileid]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.targetPage]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
					</when>			
					<when condition="compare" compareTarget="{@form[params.fromSource]:value}" compareBy="EQ" compareWith="library" at="initForm, postCommit">
						<action target="{@form[params.fromFilename]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.fromFileid]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.targetPage]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
					</when>			
				</dependentActions>
			</property>
			
			<property path="params.fromFilename" input="spark.components.TextInput"/>
			<property path="params.fromFileid" input="spark.components.TextInput"/>
			<property path="params.targetPage" input="spark.components.DropDownList">
				<dataSource source="{@project:getPageCacheList()}" labelField="Title" valueField="pageid"/>
				<dependentActions>
					<when at="postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="BaseView">						
						<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}"  caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when at="postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="ScrollView">						
						<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}"  caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when at="postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">
						<action target="{@form[GroupList]:}" method="setOptions" value="{@project:getGroupList(@form[params.targetPage]:value)}" valueField="rowarray" labelField="idFieldName" caseOf="true"/>
						<action target="{@form[GroupList]:}"  method="setProperty" property="selectedIndex" value="0" caseOf="true"/>
						<action target="{@form[GroupList]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[CellList]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.name]:}" method="setValue" value=""  caseOf="true"/>
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property formKey="GroupList" input="spark.components.DropDownList" labelField="idFieldName" valueField="rowarray">
				<dependentActions>
					<when at="postCommit" condition="compare" compareTarget="{@form[GroupList]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[CellList]:}" method="setOptions" value="{@form[GroupList]:value}"  labelField="name"  caseOf="true"/>
						<action target="{@form[CellList]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
					</when>	
					<when at="initForm">						
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
					</when>	
				</dependentActions>
			</property>
			<property formKey="CellList" input="spark.components.DropDownList" labelField="name" >
				 <dependentActions>
					<when at="postCommit" condition="compare" compareTarget="{@form[CellList]:value}" compareBy="NE" compareWith="">
						<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}"  caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>	
					<when at="initForm">					
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
					</when>						
				</dependentActions>
			</property>
			
			<property path="params.name" input="spark.components.DropDownList">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dependentActions>
					<when at="initForm">					
						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
					</when>						
				</dependentActions>
			</property>

		</type>
		
		<type name="To">
			<property path="params.toSource" dataType="array" input="spark.components.DropDownList" init="localFile">
				<validations><validation validator="RequiredValueValidator"/></validations>
			    <dataSource>
					<data name="localFile"/>
					<data name="library"/>
					<data name="remoteFile"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[params.toSource]:value}" compareBy="EQ" compareWith="" at="initForm, postCommit">
						<action target="{@form[params.toFilename]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.toFileid]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[params.toSource]:value}" compareBy="EQ" compareWith="localFile" at="initForm, postCommit">
						<action target="{@form[params.toFilename]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.toFileid]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[params.toSource]:value}" compareBy="EQ" compareWith="remoteFile" at="initForm, postCommit">
						<action target="{@form[params.toFilename]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.toFileid]:}" method="folded" value="false" caseOf="true"/>
					</when>			
					<when condition="compare" compareTarget="{@form[params.toSource]:value}" compareBy="EQ" compareWith="library" at="initForm, postCommit">
						<action target="{@form[params.toFilename]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.toFileid]:}" method="folded" value="false" caseOf="true"/>
					</when>		
				</dependentActions>
			</property>
			<property path="params.toFilename" input="spark.components.TextInput"/>
			<property path="params.toFileid" input="spark.components.TextInput"/>
		</type>	
   		
		<type name="condition" input="HRule">
			<property path="params.condition" input="LabelWithButton"/>
		</type>
		
		<type name="resultEvents" input="HRule">
			<property path="actions.success" input="LabelWithButton"/>
			<property path="actions.error" input="LabelWithButton"/>
		</type>
	</properties>
	
</item>