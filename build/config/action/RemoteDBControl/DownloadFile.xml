<?xml version="1.0" encoding="utf-8"?>
<item targetClass="DownloadFile" category="ComAction" type="Comm" method="DownloadFile">
	<properties>
		<type name="parameters" input="None">			
			<property path="params.source" input="spark.components.DropDownList">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dataSource>
				 	<data name="remote"/>
				 	<data name="url"/>
			  	</dataSource>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[params.source]:value}" compareBy="EQ" compareWith="remote">						
						<action target="{@form[params.refFilename]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[params.source]:value}" compareBy="EQ" compareWith="url">						
						<action target="{@form[params.refFilename]:}" method="folded" value="true" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			
 			<property path="params.targetPage" input="spark.components.DropDownList">
 			    <dataSource source="{@project:getPageCacheList()}" labelField="Title" valueField="pageid"/>
 				<dependentActions>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="BaseView">						
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[params.sourceUIPart]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
 						<action target="{@form[params.sourceUIPart]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.refFiletype]:}" method="folded" value="false" caseOf="true"/>
 					</when>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="ScrollView">						
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[params.sourceUIPart]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
 						<action target="{@form[params.sourceUIPart]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.refFiletype]:}" method="folded" value="false" caseOf="true"/>
 					</when>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="SplitView">						
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[params.sourceUIPart]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
 						<action target="{@form[params.sourceUIPart]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.refFiletype]:}" method="folded" value="false" caseOf="true"/>
 					</when>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">
 						<action target="{@form[GroupList]:}" method="setOptions" value="{@project:getGroupList(@form[params.targetPage]:value)}" valueField="rowarray" labelField="idFieldName" caseOf="true"/>
 						<action target="{@form[GroupList]:}"  method="setProperty" property="selectedIndex" value="0" caseOf="true"/>
 						<action target="{@form[GroupList]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.sourceUIPart]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>  
 					</when>
 				</dependentActions>
 			</property>
 			<property formKey="GroupList" input="spark.components.DropDownList" labelField="idFieldName" valueField="rowarray">
 				<dependentActions>
 					<when at="initForm">						
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 					</when>	
 					<when at="postCommit" condition="compare" compareTarget="{@form[GroupList]:value}" compareBy="NE" compareWith="">						
 						<action target="{@form[CellList]:}" method="setOptions" value="{@form[GroupList]:value}"  labelField="name"  caseOf="true"/>
 						<action target="{@form[CellList]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
 					</when>	
 				</dependentActions>
 			</property>
 			<property formKey="CellList" input="spark.components.DropDownList" labelField="name" >
 				 <dependentActions>
 					<when at="initForm">					
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
 					</when>						
 					<when at="postCommit" condition="compare" compareTarget="{@form[CellList]:value}" compareBy="NE" compareWith="">
 						<action target="{@form[params.sourceUIPart]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" caseOf="true"/>
 						<action target="{@form[params.sourceUIPart]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" caseOf="true"/>
 						<action target="{@form[params.refFiletype]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.refFiletype]:}" method="folded" value="false" caseOf="true"/>
 					</when>	
 				</dependentActions>
 			</property>
 			
 			<property path="params.sourceUIPart" input="spark.components.DropDownList">
				<validations><validation validator="RequiredValueValidator"/></validations>
			</property>
			<property path="params.refFiletype" input="spark.components.DropDownList">
			</property>
			<property path="params.refFilename" input="spark.components.TextInput">
			</property>	
						
		</type>
		
		<type name="condition" input="HRule">
			<property path="params.condition" input="LabelWithButton"/>
		</type>
		<type name="resultEvents" input="HRule">
			<property path="actions.success" input="LabelWithButton"/>
			<property path="actions.error" input="LabelWithButton"/>
		</type>
	</properties>
</item>