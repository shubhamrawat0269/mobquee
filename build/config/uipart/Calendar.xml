<?xml version="1.0" encoding="utf-8"?>
<item targetClass="Calendar" mockup="com.mobilous.builder.client.pageeditor.editor.mockup.Calendar.CalendarView" imagePath="assets/toolbox/ico_calendar.png" description="Here is the label description"
		visible="true" visibleInTableView="true" helpLink_EN="" helpLink_JP="">
	<properties>
		<type name="Type" @stopCommit="true">
			<property path="name" input="spark.components.TextInput">
				<validations>
					<validation validator="UniqUINameValidator">
						<args>
							<arg property="currentSettings" value="{@currentSettings:}"/>
							<arg property="pageContainerDic" value="{@page:}"/>
							<arg property="uiPartDic" value="{@base:}"/>
							<arg property="tableViewCellDic" value="{@tableviewCell:}"/>
							<arg property="toolbarUiDic" value="{@toolbarUiDic:}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="fieldname" input="spark.components.DropDownList123">
				<dataSource source="@dbTable:fieldswithBracket" labelField="fieldname" />
				<dependentActions>
					<when condition="compare" compareTarget="@dbTable:" compareBy="IS_NULL_OR_EMPTY" at="initForm" @stopCommit="true">
						<action target="{@form[fieldname]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[fieldname]:}" method="folded" value="false" caseOf="false"/>
						<action target="{@form[fieldname]:}" method="setOptions" value="@dbTable:fieldswithBracket" labelField="fieldname" caseOf="false"/> 
					</when>
					<when condition="compare" compareTarget="{@form[fieldname]:value}" compareBy="IS_NULL_OR_EMPTY" at="postCommit">
						<action target="{@form[selectedDate]:}" method="setValue" value="{@form[fieldname]:value}" chainedEvent="change" caseOf="false"/>
					</when>
				</dependentActions>
			</property>			
			<property path="placeholder" dataType="String" input="spark.components.TextInput" maxlength="50" copyable="true"/>
			<property path="setInputlabel" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="displayFormat" input="spark.components.DropDownList" init="dd-MM-yyyy">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dataSource>
				 	<data name="dd-MM-yyyy"/>
				 	<data name="dd/MM/yyyy"/>
					<data name="yyyy-MM-dd"/>
				 	<data name="yyyy/MM/dd"/>
			  	</dataSource>
			</property>
			<property path="selectedDate" input="DateFieldEditor" copyable="true" mode="Date" />
			<property path="type" dataType="String" input="spark.components.DropDownList" init="Gregorian" copyable="true">
				<dataSource>
					<data name="Gregorian"/>
					<data name="Japanese"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="Gregorian" at="initForm, postCommit">
						<action target="{@form[jpYears]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[minRange]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[maxRange]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[minRange]:}" method="setValue" value="{@base:setMinYear(@form[type]:value)}" caseOf="true"/>
						<action target="{@form[maxRange]:}" method="setValue" value="{@base:setMaxYear(@form[type]:value)}" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="Japanese" at="initForm, postCommit">
						<action target="{@form[jpYears]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[jpYears]:}" method="folded" value="true" caseOf="false"/>
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[jpYears]:value}" compareBy="EQ" compareWith="Custom" at="initForm, postCommit">					
								<action target="{@form[minRange]:}" method="folded" value="false" caseOf="true"/>
								<action target="{@form[maxRange]:}" method="folded" value="false" caseOf="true"/>
								<action target="{@form[minRange]:}" method="folded" value="true" caseOf="false"/>
								<action target="{@form[maxRange]:}" method="folded" value="true" caseOf="false"/>						
							</when>
						</action>
						<action target="{@form[minRange]:}" method="setValue" value="{@base:setMinYear(@form[jpYears]:value)}" caseOf="true"/>
						<action target="{@form[maxRange]:}" method="setValue" value="{@base:setMaxYear(@form[jpYears]:value)}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="jpYears" input="spark.components.DropDownList" dataType="array" init="Custom" copyable="true">
				<dataSource source="{@base:getJapaneseYears()}" labelField="jp" valueField="en" />
				<dependentActions>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="Gregorian" at="initForm, postCommit">
						<action target="{@form[jpYears]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[minRange]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[maxRange]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[minRange]:}" method="setValue" value="{@base:setMinYear(@form[type]:value)}" caseOf="true"/>
						<action target="{@form[maxRange]:}" method="setValue" value="{@base:setMaxYear(@form[type]:value)}" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="Japanese" at="initForm, postCommit">
						<action target="{@form[jpYears]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[jpYears]:}" method="folded" value="true" caseOf="false"/>
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[jpYears]:value}" compareBy="EQ" compareWith="Custom" at="initForm, postCommit">					
								<action target="{@form[minRange]:}" method="folded" value="false" caseOf="true"/>
								<action target="{@form[maxRange]:}" method="folded" value="false" caseOf="true"/>
								<action target="{@form[minRange]:}" method="folded" value="true" caseOf="false"/>
								<action target="{@form[maxRange]:}" method="folded" value="true" caseOf="false"/>						
							</when>
						</action>
						<action target="{@form[minRange]:}" method="setValue" value="{@base:setMinYear(@form[jpYears]:value)}" caseOf="true"/>
						<action target="{@form[maxRange]:}" method="setValue" value="{@base:setMaxYear(@form[jpYears]:value)}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="minRange" dataType="String" input="spark.components.TextInput" inc="1" copyable="true"/>
			<property path="maxRange" dataType="String" input="spark.components.TextInput" copyable="true"/>
			<property path="showIcon" dataType="Boolean" input="spark.components.CheckBox" value="true" copyable="true" />
			<property path="showElevation" dataType="Boolean" input="spark.components.CheckBox" value="false" disable="true"/>
			<property path="hidden" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="taborder" dataType="Number" input="spark.components.NumericStepper" min="0" max="1000" copyable="true"/>
		</type>
		<type name="Style" @stopCommit="true">
			<property path="backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="backgroundColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
			<property path="borderWeight" dataType="Number" input="spark.components.NumericStepper" min="0" max="10" inc="1" copyable="true"/>
			<property path="borderColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="borderColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
			<property path="cornerRadius" dataType="Number" input="spark.components.NumericStepper" min="0" max="10" inc="1" init="0" copyable="true"/>
		</type>
		<type name="Font" @stopCommit="true">
	    	<property path="font.fontName" input="spark.components.DropDownList" dataType="array" init="system" copyable="true">
				<dataSource source="{@base:getFontNames()}" />
			</property>
			<property path="font.fontSize" dataType="Number" input="spark.components.NumericStepper" min="6" max="100" inc="1" init="14" copyable="true"/>
			<property path="font.textColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="font.textAlignment" dataType="custom" input="spark.components.RadioButton" init="left" copyable="true">
				<dataSource>
					<data name="left" path="left"/>
					<data name="center" path="center"/>
					<data name="right" path="right"/>
				</dataSource>
			</property>
			<property path="verticalAlignment" dataType="custom" input="spark.components.RadioButton" init="middle" copyable="true">
				<dataSource>
					<data name="top" path="top"/>
					<data name="middle" path="middle"/>
					<data name="bottom" path="bottom"/>
				</dataSource>
			</property>
			<property path="placeholderColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
		</type>
		<type name="TextPadding" @stopCommit="true">
			<property path="padding.top" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.left" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.right" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.bottom" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
		</type>
		<type name="Actions">
			<property path="actions.valueChanged" input="LabelWithButton" />
		</type>
		<type name="Geometry" @stopCommit="true">
			<property path="frame.x" dataType="Number" input="spark.components.NumericStepper" min="0" max="9999" copyable="true"/>
			<property path="frame.y" dataType="Number" input="spark.components.NumericStepper" min="0" max="9999" copyable="true"/>
			<property path="frame.width" dataType="Number" input="spark.components.NumericStepper" min="40" max="9999" init="150" copyable="true"/>
			<property path="frame.height" dataType="Number" input="spark.components.NumericStepper" min="20" max="9999" init="40" copyable="true"/>
		</type> 
	</properties>
</item>
