<?xml version="1.0" encoding="utf-8"?>
<item targetClass="TileList" mockup="com.mobilous.builder.client.pageeditor.editor.mockup.TileList.TileListView" visible="true" visibleInTableView="true" imagePath="assets/toolbox/ico_tilelist.png" description="Here is the label description"
		>
	<properties>
		<type name="Type" @stopCommit="true">
			<property path="name" input="spark.components.TextInput">
				<validations>
					<validation validator="UniqUINameValidator">
						<args>
							<arg property="currentSettings" value="{@currentSettings:}"/>
							<arg property="pageContainerDic" value="{@page:}"/>
							<arg property="uiPartDic" value="{@base:}"/>
							<arg property="tableViewCellDic" value="{@tableviewCell:}"/>
							<arg property="toolbarUiDic" value="{@toolbarUiDic:}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="direction" input="spark.components.DropDownList" dataType="array" init="Horizontal" copyable="true"> 
				<dataSource>
					<data name="Horizontal" />
					<data name="Vertical" />
				</dataSource>
				<dependentActions>
	 		        <when condition="compare" compareTarget="{@form[direction]:value}" compareBy="EQ" compareWith="Horizontal" at="initForm, postCommit">
						<action target="{@form[paging]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[circular]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[showarrow]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[isAccordian]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[accRecordsCount]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderHeight]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderBorderWeight]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderBGColor]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderTextColor]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderIconPosition]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderIconClose]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderIconOpen]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[Groupby]:}" method="folded" value="true" caseOf="true" />
					</when>
    		        <when condition="compare" compareTarget="{@form[direction]:value}" compareBy="EQ" compareWith="Vertical" at="initForm, postCommit">
    		        	<action target="{@form[paging]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[circular]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[showarrow]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[paging]:}" method="setValue" value="0" caseOf="true"/>
						<action target="{@form[circular]:}" method="setValue" value="0" caseOf="true"/>
						<action target="{@form[isAccordian]:}" method="folded" value="false" caseOf="true"/>
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[isAccordian]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
								<action target="{@form[accRecordsCount]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[accRecordsCount]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[accHeaderHeight]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[accHeaderHeight]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[accHeaderBorderWeight]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[accHeaderBorderWeight]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[accHeaderBGColor]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[accHeaderBGColor]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[accHeaderTextColor]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[accHeaderTextColor]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[accHeaderIconPosition]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[accHeaderIconPosition]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[accHeaderIconClose]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[accHeaderIconClose]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[accHeaderIconOpen]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[accHeaderIconOpen]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[Groupby]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[Groupby]:}" method="folded" value="false" caseOf="false" />
							</when>
						</action>
			        </when>
			    </dependentActions>
			</property>
			<property path="paging" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true" />
			<property path="circular" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true" />
			<property path="showarrow" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true" />
			<property path="shownext" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true" />
			<property path="hidden" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
		</type>
		<type name="Style" @stopCommit="true">
			<property path="backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="backgroundColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
		</type>  
		
		<type name="DBSettings" @stopCommit="true">
			<property path="ServiceName" input="spark.components.DropDownList">
				<dataSource source="@project:getServices()" labelField="label" valueField="value"/>
				<dependentActions>
					<when at="initForm,postCommit" stopCommit="true">
						<action target="{@form[tablename]:}" method="setOptions" value="{@project:getDbTableDicsByServiceName(@form[ServiceName]:value)}" labelField="tablename" valueField="tablename"/>
						<action target="{@form[tablename]:}"  method="setProperty" property="selectedIndex" value="-1"/> 
						<action target="{@form[fieldname]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname"/>
						<action target="{@form[Groupby]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="tablename" input="spark.components.DropDownList">
				<dataSource source="@project:getDbTableDicsByServiceName(@form[ServiceName]:value)" labelField="tablename" valueField="tablename"/>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[tablename]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[fieldname]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Groupby]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="where" input="spark.components.TextInput" validator="whereClauseValidator"/>
			<property path="sort" input="spark.components.TextInput"/>
			<property path="limit" input="spark.components.NumericStepper" min="0" max="50" inc="1" init="0"/>
			<property path="isAccordian" input="spark.components.CheckBox" init="0" >
				<dependentActions>
					<when condition="compare" compareTarget="{@form[isAccordian]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[accRecordsCount]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accRecordsCount]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[accHeaderHeight]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderHeight]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[accHeaderBorderWeight]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderBorderWeight]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[accHeaderBGColor]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderBGColor]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[accHeaderTextColor]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderTextColor]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[accHeaderIconPosition]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderIconPosition]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[accHeaderIconClose]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderIconClose]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[accHeaderIconOpen]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[accHeaderIconOpen]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[Groupby]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[Groupby]:}" method="folded" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="Groupby" input="spark.components.DropDownList"/>
			<property path="accRecordsCount" input="spark.components.CheckBox" init="1"/>
			<property path="accHeaderHeight" input="spark.components.NumericStepper" min="32" max="56" init="32" copyable="true"/>
			<property path="accHeaderBorderWeight" input="spark.components.NumericStepper" min="0" max="10" init="1" copyable="true"/>
			<property path="accHeaderBGColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="accHeaderTextColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="accHeaderIconPosition" dataType="array" input="spark.components.DropDownList" init="left">
				<dataSource>
					<data name="left"/>
					<data name="right"/>
				</dataSource>
			</property>		
			<property path="accHeaderIconClose" input="TextInputWithButton"/>
			<property path="accHeaderIconOpen" input="TextInputWithButton"/>
		</type>	
		
		<type name="Items">
			<property path="dataarray[0].rows" input="spark.components.NumericStepper" min="1" max="100" inc="1" init="1" copyable="true"/>
			<property path="dataarray[0].columns" input="spark.components.NumericStepper" min="1" max="100" inc="1" init="1" copyable="true"/>
			<property path="dataarray[0].gap" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="4" copyable="true"/>
			<property formKey="dataarray[0].Fields" path="dataarray[0]" input="LabelWithButton" popup="CellEditor" source="TileList">
				<dependentActions>
					<when at="preCommit" stopCommit="true">
						<action target="{@form[dataarray[0].Fields]:}" method="{@base:notifyChange()}"/>
					</when>
				</dependentActions>
			</property>
		</type>
		
		<type name="Padding" @stopCommit="true">
			<property path="padding.top" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.left" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.right" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.bottom" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
		</type>
		<type name="Geometry" @stopCommit="true">
			<property path="frame.x" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.y" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.width" dataType="Number" input="spark.components.NumericStepper" min="50" max="10000" init="320" copyable="true"/>
			<property path="frame.height" dataType="Number" input="spark.components.NumericStepper" min="10" max="10000" init="108" copyable="true"/>
		</type> 
	</properties>
</item>
