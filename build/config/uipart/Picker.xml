<?xml version="1.0" encoding="utf-8"?>
<item targetClass="Picker" mockup="com.mobilous.builder.client.pageeditor.editor.mockup.Picker.PickerView" visible="true" imagePath="assets/toolbox/ico_pickerview.png" description="Here is the label description"
		helpLink_EN="/picker2.htm" helpLink_JP="/sheet002.htm#RANGE!A1200">
	<properties>
		<type name="Type" @stopCommit="true">
			<property path="name" input="spark.components.TextInput">
				<validations>
					<validation validator="UniqUINameValidator">
						<args>
							<arg property="currentSettings" value="{@currentSettings:}"/>
							<arg property="pageContainerDic" value="{@page:}"/>
							<arg property="uiPartDic" value="{@base:}"/>
							<arg property="tableViewCellDic" value="{@tableviewCell:}"/>
							<arg property="toolbarUiDic" value="{@toolbarUiDic:}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="hidden" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="dataarray.length" input="spark.components.NumericStepper" min="1" max="10" copyable="true">
				 <dependentActions>					
					<when condition="compare" compareTarget="{@form[dataarray.length]:value}" compareBy="GT" compareWith="{@base:dataarray.length}" stopCommit="false" at="preCommit">
						<action target="{@form[dataarray.length]:}" method="{@base:addOneColumn()}" caseOf="true"/>
						<action target="{@form[dataarray.length]:}" method="setValue" value="{@base:dataarray.length}" caseOf="true"/>
						<action target="{@form[dataarray[*].width]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].width}" caseOf="true"/>
   						<action target="{@form[dataarray[*].width]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[IndexOfColumn]:value + &quot;].width&quot;}" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[dataarray.length]:value}" compareBy="LT" compareWith="{@base:dataarray.length}" stopCommit="false" at="preCommit">
						<action target="{@form[dataarray.length]:}" method="{@base:removeOneColumn()}" caseOf="true"/>
						<action target="{@form[dataarray.length]:}" method="setValue" value="{@base:dataarray.length}" caseOf="true"/>
						<action target="{@form[dataarray[*].width]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].width}" caseOf="true"/>
						<action target="{@form[dataarray[*].width]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[IndexOfColumn]:value + &quot;].width&quot;}" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[dataarray.length]:value}" compareBy="LE" compareWith="{@form[IndexOfColumn]:value}" stopCommit="true" at="initForm, postCommit">
						<action target="{@form[IndexOfColumn]:}" method="setValue" value="{@base:dataarray.length - 1}" caseOf="true" chainedEvent="change"/>
					</when>
					<when stopCommit="true" at="initForm, postCommit">
						<action target="{@form[IndexOfColumn]:}" method="setMax" value="{@base:dataarray.length - 1}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>	
			
			<property formKey="IndexOfColumn" input="spark.components.NumericStepper" min="0" max="9" init="0">
				<dependentActions>
					<when stopCommit="true" at="initForm, postCommit">	
						<action target="{@form[dataarray[*].width]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].width}" caseOf="true"/>
						<action target="{@form[dataarray[*].width]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[IndexOfColumn]:value + &quot;].width&quot;}" caseOf="true"/>
						<action target="{@form[dataarray[*].itemarray]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].itemarray}" caseOf="true"/>
		   	    		<action target="{@form[dataarray[*].itemarray]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[IndexOfColumn]:value + &quot;].itemarray&quot;}" caseOf="true"/>
		   	    		<action target="{@form[dataarray[*].itemarray]:}" method="setProperty" property="selectedIndex" value="0" caseOf="true" chainedEvent="indexChange"/>
		   	    		<action target="{@form[dataarray[*].currentIndex]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].currentIndex}" caseOf="true"/>
						<action target="{@form[dataarray[*].currentIndex]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[IndexOfColumn]:value + &quot;].currentIndex&quot;}" caseOf="true"/>
						<action target="{@form[dataarray[*].fieldValue]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].fieldValue}" caseOf="true"/>
						<action target="{@form[dataarray[*].fieldValue]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[IndexOfColumn]:value + &quot;].fieldValue&quot;}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			
			<property formKey="dataarray[*].width" path="dataarray[0].width" input="spark.components.NumericStepper" min="30" max="300" copyable="true"/>
			
		</type>
		<type name="Items" @stopCommit="true">
			<property formKey="dataarray[*].itemarray" path="dataarray[0].itemarray" input="PickerListForm" itemClass="com.mobilous.builder.client.lib.adf.uiparts.PickerDataItemDic" labelField="text" copyable="true">
				 <dependentActions>
					<when at="initForm, postIndexChange">
					    <action target="{@form[dataarray[*].itemarray[0].text]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].itemarray[@form[dataarray[*].itemarray]:selectedIndex].text}"/>
					    <action target="{@form[dataarray[*].itemarray[0].text]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[IndexOfColumn]:value + &quot;].itemarray[&quot; + @form[dataarray[*].itemarray]:selectedIndex + &quot;].text&quot;}"/>
					    <action target="{@form[dataarray[*].itemarray[0].fieldname]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].itemarray[@form[dataarray[*].itemarray]:selectedIndex].fieldname}"/>
					    <action target="{@form[dataarray[*].itemarray[0].fieldname]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[IndexOfColumn]:value + &quot;].itemarray[&quot; + @form[dataarray[*].itemarray]:selectedIndex + &quot;].fieldname&quot;}"/>
					</when>
					<when stopCommit="true" at="initForm, postCommit">
						<action target="{@form[dataarray[*].currentIndex]:}" method="setMax" value="{@base:dataarray[@form[IndexOfColumn]:value].itemarray.length - 1}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property formKey="dataarray[*].itemarray[0].text" path="dataarray[0].itemarray[0].text" input="spark.components.TextInput" copyable="true"/>
			<property formKey="dataarray[*].itemarray[0].fieldname" path="dataarray[0].itemarray[0].fieldname" dataType="String" input="spark.components.TextInput" copyable="true"/>
			<property formKey="dataarray[*].currentIndex" path="dataarray[0].currentIndex" dataType="Numeric" input="spark.components.NumericStepper" min="0" max="300" inc="1" copyable="true"/>
			<property formKey="dataarray[*].fieldValue" path="dataarray[0].fieldValue" input="spark.components.TextInput" copyable="true"/>
		</type>	
		<type name="Actions">
			<property path="actions.didSelectRow" input="LabelWithButton" />			
	    </type>
		<type name="Geometry" @stopCommit="true">
			<property path="frame.x" dataType="Number" input="spark.components.NumericStepper" min="0" max="3000" copyable="true"/>
			<property path="frame.y" dataType="Number" input="spark.components.NumericStepper" min="0" max="3000" copyable="true"/>
			<property path="frame.width" dataType="Number" input="spark.components.NumericStepper" min="100" max="3000" init="320" copyable="true">
				<dependentActions>
					<when at="initForm, postCommit">	
						<action target="{@form[dataarray[*].width]:}" method="{@base:setPickerColumnWidth()}" caseOf="true"/>
						<action target="{@form[dataarray[*].width]:}" method="setValue" value="{@base:dataarray[@form[IndexOfColumn]:value].width}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="frame.height" dataType="Number" input="spark.components.NumericStepper" min="100" max="3000" init="160" copyable="true"/>
		</type> 
	</properties>
</item>
