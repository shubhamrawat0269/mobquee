<?xml version="1.0" encoding="utf-8"?>
<item targetClass="startStepCounter" category="SensorAction" type="Sensor" method="startStepCounter"
		helpLink_EN="" helpLink_JP="">
	<properties>
		<type name="parameters" input="None">
			<property path="params.targetPage" input="spark.components.DropDownList">
			    <validations><validation validator="RequiredValueValidator"/></validations>
			    <dataSource source="{@project:getPageCacheList()}" labelField="Title" valueField="pageid"/><dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="">						
						<action target="{@form[params.targetUIPart]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@page:pageid, @form[base.currentSettings]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
     					<action target="{@form[params.targetUIPart]:}" method="setProperty" property="selectedIndex" value="-1"/>
						<action target="{@form[params.targetUIPart]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="BaseView">						
						<action target="{@form[params.targetUIPart]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
						<action target="{@form[params.targetUIPart]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.targetUIPart]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="ScrollView">						
						<action target="{@form[params.targetUIPart]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
						<action target="{@form[params.targetUIPart]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.targetUIPart]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType2(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableViewList">						
						<action target="{@form[params.targetUIPart]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.targetUIPart]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
						<action target="{@form[params.targetUIPart]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="params.targetUIPart" input="spark.components.DropDownList">
       			<validations><validation validator="RequiredValueValidator"/></validations>
    		</property>	
			<property path="params.name" input="spark.components.TextInput">
			</property>
			<property path="params.isResume" input="spark.components.CheckBox">
    		</property>	
		</type>
		<type name="condition" input="HRule">
			<property path="params.condition" input="LabelWithButton"/>
		</type>
		<type name="resultEvents" input="HRule">
			<property path="actions.success" input="LabelWithButton"/>
			<property path="actions.error" input="LabelWithButton"/>
		</type>
	</properties>
</item>