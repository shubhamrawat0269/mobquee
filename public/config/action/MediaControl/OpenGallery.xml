<?xml version="1.0" encoding="utf-8"?>
<item targetClass="OpenGallery" category="MediaAction" type="Media" method="OpenGallery"
		helpLink_EN="" helpLink_JP="">
	<properties>
		<type name="parameters" input="None">	
			
			<property path="params.mediatype" input="spark.components.DropDownList" init="image">
			  	<validations><validation validator="RequiredValueValidator"/></validations>
				<dataSource>
				 	<data name="image"/>
 				 	<data name="video"/>
 				 	<data name="file"/>
			  	</dataSource>
			  	<dependentActions>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[params.mediatype]:value}" compareBy="EQ" compareWith="image">						
						<action target="{@form[params.filetype]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.multiple]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.imgquality]:}" method="folded" value="false" caseOf="true"/>	
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="NE" compareWith="" at="initForm, postCommit">
								<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
 								<action target="{@form[params.name]:}" method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
							</when>
						</action>
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[params.multiple]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
								<action target="{@form[params.limit]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[params.limit]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[params.refMediaList]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[params.refMediaList]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[params.refMediaList[*].value]:}" method="folded" value="true" caseOf="true" />
								<action target="{@form[params.refMediaList[*].value]:}" method="folded" value="false" caseOf="false" />
								<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
								<action target="{@form[params.name]:}" method="folded" value="true" caseOf="false"/>
								<action target="{@form[params.fileNameUI]:}" method="folded" value="false" caseOf="true" />
								<action target="{@form[params.fileNameUI]:}" method="folded" value="true" caseOf="false" />
								<action target="{@form[params.fileSizeUI]:}" method="folded" value="false" caseOf="true" />
								<action target="{@form[params.fileSizeUI]:}" method="folded" value="true" caseOf="false" />
							</when>
						</action>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[params.mediatype]:value}" compareBy="EQ" compareWith="video">	
						<action target="{@form[params.filetype]:}" method="folded" value="true" caseOf="true"/>					
						<action target="{@form[params.multiple]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.limit]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.refMediaList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.refMediaList[*].value]:}" method="folded" value="true" caseOf="true" />
 						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.fileNameUI]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[params.fileSizeUI]:}" method="folded" value="false" caseOf="true" />
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
  						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.imgquality]:}" method="folded" value="true" caseOf="true"/>
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="NE" compareWith="" at="initForm, postCommit">
								<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
 								<action target="{@form[params.name]:}" method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
							</when>
						</action>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[params.mediatype]:value}" compareBy="EQ" compareWith="file">	
						<action target="{@form[params.filetype]:}" method="folded" value="false" caseOf="true"/>					
						<action target="{@form[params.multiple]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.limit]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.refMediaList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.refMediaList[*].value]:}" method="folded" value="true" caseOf="true" />
 						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.fileNameUI]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[params.fileSizeUI]:}" method="folded" value="false" caseOf="true" />
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
  						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.imgquality]:}" method="folded" value="true" caseOf="true"/>
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="NE" compareWith="" at="initForm, postCommit">
								<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
 								<action target="{@form[params.name]:}" method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
							</when>
						</action>
					</when>
 				</dependentActions>
			</property>
			
			<property path="params.imgquality" input="spark.components.NumericStepper" init="0.6" min="0.3" max="1.0" inc="0.1">
			</property>
			
			<property path="params.filetype" input="spark.components.DropDownList" init="pdf">
			  	<validations><validation validator="RequiredValueValidator"/></validations>
				<dataSource>
				 	<data name="document"/>
				 	<data name="excel"/>
				 	<data name="pdf"/>
				 	<data name="presentation"/>
					<data name="zipped" />
			  	</dataSource>
			</property>
			  	
			<property path="params.targetPage" input="spark.components.DropDownList">
 			    <dataSource source="{@project:getPageCacheList()}" labelField="Title" valueField="pageid"/>
 				<dependentActions>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="">						
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
					</when>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="BaseView">						
 						<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
 						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
 					</when>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="ScrollView">						
 						<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
 						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
 					</when>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="SplitView">						
 						<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
 						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
 					</when>
 					<when at="postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">
 						<action target="{@form[GroupList]:}" method="setOptions" value="{@project:getGroupList(@form[params.targetPage]:value)}" valueField="rowarray" labelField="idFieldName" caseOf="true"/>
 						<action target="{@form[GroupList]:}"  method="setProperty" property="selectedIndex" value="0" caseOf="true"/>
 						<action target="{@form[GroupList]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[CellList]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
 						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/> 
 					</when>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="NE" compareWith="">						
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[params.multiple]:value}" compareBy="EQ" compareWith="1" at="initForm, postCommit">
								<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
								<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
							</when>
						</action>
						<action target="{@form[params.refMediaList[*].value]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
					</when>
 				</dependentActions>
 			</property>
 			<property formKey="GroupList" input="spark.components.DropDownList" labelField="idFieldName" valueField="rowarray">
 				<dependentActions>
 					<when at="postCommit" condition="compare" compareTarget="{@form[GroupList]:value}" compareBy="NE" compareWith="">						
 						<action target="{@form[CellList]:}" method="setOptions" value="{@form[GroupList]:value}"  labelField="name"  caseOf="true"/>
 						<action target="{@form[CellList]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/>
 					</when>	
 					<when at="initForm">						
 						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true"/>
 					</when>	
 				</dependentActions>
 			</property>
 			<property formKey="CellList" input="spark.components.DropDownList" labelField="name" >
 				 <dependentActions>
 					<when at="postCommit" condition="compare" compareTarget="{@form[CellList]:value}" compareBy="NE" compareWith="">
 						<action target="{@form[params.name]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
 						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
 						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
 					</when>	
 					<when at="initForm">					
 						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true"/>
 					</when>
 					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="NE" compareWith="">						
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[params.multiple]:value}" compareBy="EQ" compareWith="1" at="initForm, postCommit">
								<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
								<action target="{@form[Name]:}" method="folded" value="true" caseOf="true"/>
							</when>
						</action>
						<action target="{@form[params.refMediaList[*].value]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
					</when>					
 				</dependentActions>
 			</property>
		
			<property path="params.multiple" dataType="Boolean" input="spark.components.CheckBox" value="false" > 
				<dependentActions>
	 		        <when condition="compare" compareTarget="{@form[params.multiple]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
	 		        	<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="false" />
						<action target="{@form[params.fileNameUI]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[params.fileNameUI]:}" method="folded" value="true" caseOf="false" />
						<action target="{@form[params.fileSizeUI]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[params.fileSizeUI]:}" method="folded" value="true" caseOf="false" />
						<action target="{@form[params.limit]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.limit]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[params.refMediaList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.refMediaList]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[params.refMediaList[*].value]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.refMediaList[*].value]:}" method="folded" value="false" caseOf="false" />
						<action method="dependentConditions" caseOf="false">
							<when condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="NE" compareWith="" at="initForm, postCommit">
								<action target="{@form[params.refMediaList[*].value]:}" method="setOptions" value="{@base:getSpecificTargetUIParts(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" labelField="uiname" valueField="uiname" caseOf="true"/>
							</when>
						</action>
					</when>
			    </dependentActions>
			</property>
			<property path="params.limit" dataType="Number" input="spark.components.NumericStepper" min="1" max="10" inc="1" init="2">
				 <dependentActions>					
					<when stopCommit="true" at="initForm, postCommit">
						<action target="{@form[params.refMediaList]:}" method="setProperty" property="limit" value="{@base:params.limit}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>	
			<property path="params.refMediaList" input="ListWithMultipleReference" itemClass="com.mobilous.builder.client.lib.adf.action.RecordValueDic" labelField="value" valueField="value">
				<dependentActions>
					<when at="initForm, postIndexChange">
						<action target="{@form[params.refMediaList[*].value]:}" method="setValue" value="{@base:params.refMediaList[@form[params.refMediaList]:selectedIndex].value}"/>
						<action target="{@form[params.refMediaList[*].value]:}" method="setPath" value="{&quot;params.refMediaList[&quot; + @form[params.refMediaList]:selectedIndex + &quot;].value&quot;}"/>	
								
					</when>	
					<when at="postCommit">
						<action target="{@base:params.refMediaUIs}" method="keyValuePair" value="{@base:params.refMediaList}"/>
					</when>	
				</dependentActions>
			</property>
			<property formKey="params.refMediaList[*].value" path="params.refMediaList[*].value" input="spark.components.DropDownList">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dependentActions>
					<when at="postCommit">
						<action target="{@base:params.refMediaUIs}" method="keyValuePair" value="{@base:params.refMediaList}"/>
					</when>	
				</dependentActions>
			</property>
 						
			<property path="params.name" input="spark.components.ComboBox" fieldnameRequired="false">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dependentActions>
					<when at="initForm" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">					
  						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
  					</when>
				</dependentActions>
			</property>
			<property formKey="Name" path="params.name" input="spark.components.TextInput">
				<validations><validation validator="RequiredValueValidator"/></validations>
			</property>
			<property path="params.fileNameUI" input="spark.components.TextInput">
			</property>
			<property path="params.fileSizeUI" input="spark.components.TextInput">
			</property>
			
		</type>
		<type name="condition" input="HRule">
			<property path="params.condition" input="LabelWithButton"/>
		</type>
		<type name="resultEvents" input="HRule">
			<property path="actions.success" input="LabelWithButton"/>
			<property path="actions.error" input="LabelWithButton"/>
		</type>
	</properties>
</item>