<?xml version="1.0" encoding="utf-8"?>
<item targetClass="UploadFile" category="MediaAction" type="Media" method="UploadFile">
	<properties>
		<type name="parameters" input="None">			

			<property path="params.type" input="spark.components.DropDownList" init="pdf">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dataSource>
				 	<data name="pdf"/>
				 	<data name="document"/>
				 	<data name="excel"/>
				 	<data name="presentation"/>
				 	<data name="others"/>
					<data name="video"/>
			  	</dataSource>
			</property>
			<property path="params.file.srcLocation" input="spark.components.DropDownList" init="device">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dataSource>
				 	<data name="device"/>
			  	</dataSource>
			  	<dependentActions>
 					<when condition="compare" compareTarget="{@form[params.file.srcLocation]:value}" compareBy="EQ" compareWith="bundle" at="initForm, postCommit">
						<action target="{@form[params.file.filename]:}" method="folded" value="false" caseOf="true"/>
 						<action target="{@form[params.file.url]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[params.file.srcLocation]:value}" compareBy="EQ" compareWith="url" at="initForm, postCommit">
						<action target="{@form[params.file.url]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.file.filename]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[params.file.srcLocation]:value}" compareBy="EQ" compareWith="remoteFile" at="initForm, postCommit">
						<action target="{@form[params.file.filename]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[params.file.url]:}" method="folded" value="true" caseOf="true"/>
					</when>			
					<when condition="compare" compareTarget="{@form[params.file.srcLocation]:value}" compareBy="EQ" compareWith="device" at="initForm, postCommit">
						<action target="{@form[params.file.filename]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.file.url]:}" method="folded" value="true" caseOf="true"/>
					</when>	
 				</dependentActions>
			</property>
			<property path="params.file.filename" input="spark.components.TextInput">
				<validations><validation validator="RequiredValueValidator"/></validations>
			</property>
			<property path="params.file.url" input="spark.components.TextInput">
				<validations><validation validator="RequiredValueValidator"/></validations>
			</property>
			
			<property path="params.name" input="spark.components.DropDownList">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dependentActions>
     				<when at="initForm">
     					<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@page:pageid, @form[base.currentSettings]:value)}"/>
     					<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1"/>
      				</when>
      			</dependentActions>
			</property>
			
			<property path="params.showprogress" input="spark.components.CheckBox" init="0">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[params.showprogress]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[params.refProgressUI]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[params.refProgressUI]:}" method="folded" value="false" caseOf="false"/>
					</when>
				</dependentActions>
			</property>
			<property path="params.refProgressUI" input="spark.components.TextInput"/>
						
		</type>
		<type name="condition" input="HRule">
			<property path="params.condition" input="LabelWithButton"/>
		</type>
		<type name="resultEvents" input="HRule">
			<property path="actions.success" input="LabelWithButton"/>
			<property path="actions.error" input="LabelWithButton"/>
		</type>
	</properties>
</item>