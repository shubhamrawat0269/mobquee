<?xml version="1.0" encoding="utf-8"?>
<item targetClass="Nudge" category="AlertAction" type="Warning" method="Nudge"
		helpLink_EN="" helpLink_JP="">
	<properties>
		<type name="parameters" input="None">	
			<property path="params.targetPage" input="spark.components.DropDownList">
			    <validations><validation validator="RequiredValueValidator"/></validations>
			    <dataSource source="{@project:getPageCacheList()}" labelField="Title" valueField="pageid"/>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="BaseView">						
						<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="ScrollView">						
						<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">
						<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType2(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">
						<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="SplitView">						
						<action target="{@form[params.name]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true"/>
						<action target="{@form[params.name]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
						<action target="{@form[params.name]:}" method="folded" value="false" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="params.name" input="spark.components.DropDownList" fieldnameRequired="false">
				<validations><validation validator="RequiredValueValidator"/></validations>
				<dependentActions>
					<when at="initForm" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">					
  						<action target="{@form[params.name]:}" method="folded" value="true" caseOf="true"/>
  					</when>						
				</dependentActions>
			</property>			
			<property path="params.message" input="spark.components.TextArea" dataType="String" heightInLines="3">
				<validations><validation validator="RequiredValueValidator"/></validations>
			</property>
			<property path="params.showClose" input="spark.components.CheckBox" value="false"/>
			<property path="params.isModal" input="spark.components.CheckBox" value="false"/>
			<property path="params.autoHideDuration" input="spark.components.NumericStepper" min="1000" max="99999" value="5000"/>
			<property path="params.bgColor" input="mx.controls.ColorPicker"/>
			<property path="params.textColor" input="mx.controls.ColorPicker"/>
		</type>
		<type name="condition" input="HRule">
			<property path="params.condition" input="LabelWithButton"/>
		</type>
		<type name="resultEvents" input="HRule">
			<property path="actions.Success" input="LabelWithButton"/>
			<property path="actions.Error" input="LabelWithButton"/>
		</type>
	</properties>
</item>