<?xml version="1.0" encoding="utf-8"?>
<item targetClass="GetValue" category="ControlAction" type="Property"
	method="GetValue" helpLink_EN="" helpLink_JP="">
	<properties>
		<type name="parameters" input="None">
			<property path="params.targetPage" input="spark.components.DropDownList">
				<validations>
					<validation validator="RequiredValueValidator" />
				</validations>
				<dataSource source="{@project:getPageCacheList()}" labelField="Title" valueField="pageid" />
				<dependentActions>
					<when at="initForm, postCommit" condition="compare"	compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="">
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true" />
					</when>
					<when at="initForm, postCommit" condition="compare"	compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="BaseView">
						<action target="{@form[params.sourceUIPart]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="setProperty"	property="selectedIndex" value="-1" caseOf="true" />
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true" />
					</when>
					<when at="initForm, postCommit" condition="compare"	compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="ScrollView">
						<action target="{@form[params.sourceUIPart]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="setProperty"	property="selectedIndex" value="-1" caseOf="true" />
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true" />
					</when>
					<when at="initForm, postCommit" condition="compare"	compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="SplitView">
						<action target="{@form[params.sourceUIPart]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="setProperty"	property="selectedIndex" value="-1" caseOf="true" />
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true" />
					</when>
					<when at="postCommit" condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView">
						<action target="{@form[GroupList]:}" method="setOptions" value="{@project:getGroupList(@form[params.targetPage]:value)}" valueField="rowarray" labelField="idFieldName" caseOf="true" />
						<action target="{@form[GroupList]:}" method="setProperty" property="selectedIndex" value="-1" caseOf="true" />
						<action target="{@form[GroupList]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[CellList]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="setProperty"	property="selectedIndex" value="-1" caseOf="true" />
						<action target="{@form[params.sourceUIPart]:}" method="folded" value="true" caseOf="true" />
					</when>
				</dependentActions>
			</property>
			<property formKey="GroupList" input="spark.components.DropDownList"	labelField="idFieldName" valueField="rowarray">
				<dependentActions>
					<when at="postCommit" condition="compare" compareTarget="{@form[GroupList]:value}" compareBy="NE" compareWith="">
						<action target="{@form[CellList]:}" method="setOptions"	value="{@form[GroupList]:value}" labelField="name" caseOf="true" />
						<action target="{@form[CellList]:}" method="setProperty" property="selectedIndex" value="-1" caseOf="true" />
						<action target="{@form[params.groupId]:}" method="setValue"	value="{@base:setValueTableList(@form[GroupList]:selectedIndex, group)}" caseOf="true" />
					</when>
					<when at="initForm">
						<action target="{@form[GroupList]:}" method="folded" value="true" caseOf="true" />
					</when>
				</dependentActions>
			</property>
			<property formKey="CellList" input="spark.components.DropDownList" labelField="name">
				<dependentActions>
					<when at="postCommit" condition="compare" compareTarget="{@form[CellList]:value}" compareBy="NE" compareWith="">
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@project:getTableViewCellStyle(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="custom" at="initForm, postCommit">
								<action target="{@form[params.sourceUIPart]:}" method="setOptions" value="{@project:getUiElementList(@form[params.targetPage]:value, @form[base.currentSettings]:value, @form[CellList]:value)}" caseOf="true" />
								<action target="{@form[params.sourceUIPart]:}" method="setProperty"	property="selectedIndex" value="-1" caseOf="true" />
								<action target="{@form[params.sourceUIPart]:}" method="folded" value="false" caseOf="true" />
								<action target="{@form[params.cellId]:}" method="setValue" value="{@base:setValueTableList(@form[CellList]:selectedIndex, cell)}" caseOf="false" />
								<action target="{@form[params.sourceUIPart]:}" method="folded" value="true" caseOf="false" />
							</when>
						</action>
					</when>
					<when at="initForm">
						<action target="{@form[CellList]:}" method="folded" value="true" caseOf="true" />
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[params.targetPage]:value}" compareBy="EQ" compareWith="" at="initForm">
								<action method="dependentConditions" caseOf="false">
									<when condition="compare" compareTarget="{@project:getTableViewCellStyle(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="custom" at="initForm, postCommit">
										<action target="{@form[GroupList]:}" method="folded" value="false" caseOf="false" />
										<action target="{@form[GroupList]:}" method="setOptions" value="{@base:getTableListValue(group)}" labelField="idFieldName" caseOf="false" />
										<action target="{@form[GroupList]:}" method="setProperty" property="_selectedIndex" value="{@base:params.groupId}" caseOf="false" />
										<action target="{@form[CellList]:}" method="folded"	value="false" caseOf="false" />
										<action target="{@form[CellList]:}" method="setOptions"	value="{@base:getTableListValue(cell)}" labelField="name" caseOf="false" />
										<action target="{@form[CellList]:}" method="setProperty" property="_selectedIndex" value="{@base:params.cellId}" caseOf="false" />
									</when>
								</action>
							</when>
						</action>
					</when>
				</dependentActions>
			</property>

			<property path="params.sourceUIPart" input="spark.components.ComboBox" fieldnameRequired="false">
				<validations>
					<validation validator="RequiredValueValidator" />
				</validations>
				<dependentActions>
					<when condition="compare" compareTarget="{@project:getPageViewType(@form[params.targetPage]:value)}" compareBy="EQ" compareWith="TableView" at="initForm">
						<action target="{@form[params.sourceUIPart]:}" method="folded" value="true" caseOf="true" />
					</when>
					<when condition="compare" compareTarget="{@form[params.sourceUIPart]:value}" compareBy="NE" compareWith="" at="initForm, postCommit">
						<action target="{@form[params.key]:}" method="setOptions" value="{@base:getUIpartsPropertiesList(@form[params.sourceUIPart]:value, @form[params.targetPage]:value, @form[base.currentSettings]:value)}" caseOf="true" />
					</when>
				</dependentActions>
			</property>
			<property path="params.key" input="spark.components.DropDownList">
				<validations>
					<validation validator="RequiredValueValidator" />
				</validations>
			</property>
			<property path="params.name" input="spark.components.TextInput">
				<validations><validation validator="RequiredValueValidator" /></validations>
			</property>


		</type>
		<type name="condition" input="HRule">
			<property path="params.condition" input="LabelWithButton" />
		</type>
		<type name="resultEvents" input="HRule">
			<property path="actions.success" input="LabelWithButton" />
			<property path="actions.error" input="LabelWithButton" />
		</type>
	</properties>
</item>