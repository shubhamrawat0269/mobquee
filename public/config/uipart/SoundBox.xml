<?xml version="1.0" encoding="utf-8"?>
<item targetClass="SoundBox" mockup="com.mobilous.builder.client.pageeditor.editor.mockup.SoundBox.SoundBoxView" visible="true" imagePath="assets/toolbox/ico_sound.png" description="Here is the label description"
		helpLink_EN="/sound_box.htm" helpLink_JP="/sheet002.htm#RANGE!A1000">
	<properties>
		<type name="Type" @stopCommit="true">
			<property path="name" input="spark.components.TextInput">
				<validations>
					<validation validator="UniqUINameValidator">
						<args>
							<arg property="currentSettings" value="{@currentSettings:}"/>
							<arg property="pageContainerDic" value="{@page:}"/>
							<arg property="uiPartDic" value="{@base:}"/>
							<arg property="tableViewCellDic" value="{@tableviewCell:}"/>
							<arg property="toolbarUiDic" value="{@toolbarUiDic:}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="filename.soundName" dataType="String" input="spark.components.TextInput"/>	
			<property path="style" input="spark.components.DropDownList" init="Black" copyable="true">
				<dataSource>
					<data name="Black"/>
					<data name="Silver"/>
				</dataSource>
			</property>
			
			<property path="recording" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true">
 				<dependentActions>
 					<when condition="compare" compareTarget="{@form[recording]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
 						<action target="{@form[localRecord]:}" method="folded" value="true" caseOf="true"/>
 						<action target="{@form[timeout]:}" method="folded" value="true" caseOf="true"/>						
 						<action target="{@form[filename.srcLocation]:}" method="folded" value="false" caseOf="true"/>
 						<action method="dependentConditions" caseOf="true">
 							<when condition="compare" compareTarget="{@form[filename.srcLocation]:value}" compareBy="EQ" compareWith="local" at="initForm, postCommit">
 								<action target="{@form[urlSound]:}" method="folded" value="true" caseOf="true"/>
 								<action target="{@form[bundleSound]:}" method="folded" value="true" caseOf="true"/>						
 								<action target="{@form[localSound]:}" method="folded" value="false" caseOf="true"/>
 								<action target="{@form[localRecord]:}" method="folded" value="true" caseOf="true"/>
 								<action target="{@form[timeout]:}" method="folded" value="true" caseOf="true"/>
 							</when>
 						</action>
 						<action method="dependentConditions" caseOf="true">
 							<when condition="compare" compareTarget="{@form[filename.srcLocation]:value}" compareBy="EQ" compareWith="bundle" at="initForm, postCommit">
 								<action target="{@form[urlSound]:}" method="folded" value="true" caseOf="true"/>
 								<action target="{@form[bundleSound]:}" method="folded" value="false" caseOf="true"/>						
 								<action target="{@form[localSound]:}" method="folded" value="true" caseOf="true"/>
 								<action target="{@form[localRecord]:}" method="folded" value="true" caseOf="true"/>
 								<action target="{@form[timeout]:}" method="folded" value="true" caseOf="true"/>
 							</when>
 						</action>
 						<action method="dependentConditions" caseOf="true">
 							<when condition="compare" compareTarget="{@form[filename.srcLocation]:value}" compareBy="EQ" compareWith="url" at="initForm, postCommit">
 								<action target="{@form[urlSound]:}" method="folded" value="false" caseOf="true"/>
 								<action target="{@form[bundleSound]:}" method="folded" value="true" caseOf="true"/>						
 								<action target="{@form[localSound]:}" method="folded" value="true" caseOf="true"/>
 								<action target="{@form[localRecord]:}" method="folded" value="true" caseOf="true"/>
 								<action target="{@form[timeout]:}" method="folded" value="true" caseOf="true"/>
 							</when>
 						</action>
 						
 						<action target="{@form[localRecord]:}" method="folded" value="false" caseOf="false"/>
 						<action target="{@form[timeout]:}" method="folded" value="false" caseOf="false"/>
 						<action target="{@form[filename.srcLocation]:}" method="folded" value="true" caseOf="false"/>
 						<action target="{@form[bundleSound]:}" method="folded" value="true" caseOf="false"/>						
 						<action target="{@form[urlSound]:}" method="folded" value="true" caseOf="false"/>
 						<action target="{@form[localSound]:}" method="folded" value="true" caseOf="false"/>
 					</when>
 				</dependentActions>
 			</property>
			
			<property path="filename.srcLocation" dataType="array" input="spark.components.DropDownList" init="bundle">
				<dataSource>
					<data name="bundle"/>
					<data name="url"/>
					<data name="local"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[filename.srcLocation]:value}" compareBy="EQ" compareWith="bundle" at="initForm, postCommit">
						<action target="{@form[urlSound]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[bundleSound]:}" method="folded" value="false" caseOf="true"/>						
						<action target="{@form[localSound]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[filename.srcLocation]:value}" compareBy="EQ" compareWith="local" at="initForm, postCommit">
					<action target="{@form[urlSound]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[bundleSound]:}" method="folded" value="true" caseOf="true"/>						
						<action target="{@form[localSound]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[filename.srcLocation]:value}" compareBy="EQ" compareWith="url" at="initForm, postCommit">
						<action target="{@form[urlSound]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[bundleSound]:}" method="folded" value="true" caseOf="true"/>						
					<action target="{@form[localSound]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when at="postCommit"  stopCommit="true">
						<action target="{@form[urlSound]:}" method="setValue" value="{@base:filename.soundURL}"/>
					</when>
				</dependentActions>
			</property>
			<property formKey="bundleSound" path="filename" dataType="SoundFileDic" input="TextInputWithButton" copyable="true" resourceType="bgm"/>
			<property formKey="urlSound" path="filename.soundURL" input="spark.components.TextInput" copyable="true">
			<dependentActions>
					<when at="postCommit"  stopCommit="true">
						<action target="{@form[urlSound]:}" method="setValue" value="{@base:filename.soundURL}"/>
					</when>
				</dependentActions>
			</property>
			<property formKey="localSound" path="filename.filename" input="spark.components.TextInput" copyable="true">
				<dependentActions>
					<when at="postCommit"  stopCommit="true">
						<action target="{@form[localSound]:}" method="setValue" value="{@base:filename.filename}"/>
					</when>
				</dependentActions>
			</property>
			
 			<property formKey="localRecord" path="filename.filename" input="spark.components.TextInput" copyable="true">
 				<dependentActions>
 					<when at="postCommit" stopCommit="true">
 						<action target="{@form[localRecord]:}" method="setValue" value="{@base:filename.filename}"/>
 					</when>
 				</dependentActions>
 			</property>
 			<property path="timeout" dataType="Number" input="spark.components.NumericStepper" init="10" min="1" max="1000" copyable="true"/>
			<property path="autoplay" dataType="Boolean" input="spark.components.CheckBox" value="0" copyable="true"/>
			<property path="hidden" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			
		</type>
		<type name="Actions">
			<property path="actions.didStartPlaySound" input="LabelWithButton" />			
			<property path="actions.didPausePlaySound" input="LabelWithButton" />
			<property path="actions.didStopPlaySound" input="LabelWithButton" />			
			<property path="actions.didFinishPlaySound" input="LabelWithButton" />
			<property path="actions.didStartRecordSound" input="LabelWithButton" />
			<property path="actions.didStopRecordSound" input="LabelWithButton" />	
		</type>
		<type name="Geometry" @stopCommit="true">
			<property path="frame.x" dataType="Number" input="spark.components.NumericStepper" min="0" max="9999" copyable="true"/>
			<property path="frame.y" dataType="Number" input="spark.components.NumericStepper" min="0" max="9999" copyable="true"/>
			<property path="frame.width" dataType="Number" input="spark.components.NumericStepper" min="300" max="300" init="300" copyable="true"/>
			<property path="frame.height" dataType="Number" input="spark.components.NumericStepper" min="30" max="30" init="30" copyable="true"/>
		</type> 
	</properties>
</item>
