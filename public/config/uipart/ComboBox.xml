<?xml version="1.0" encoding="utf-8"?>
<item targetClass="ComboBox" mockup="com.mobilous.builder.client.pageeditor.editor.mockup.ComboBox.ComboBoxView" imagePath="assets/toolbox/ico_combobox.png" description="Here is the label description"
 		visible="true" visibleInTableView="true"
		helpLink_EN="/combo_box.htm" helpLink_JP="/sheet002.htm#RANGE!A1350">
	<properties>
		<type name="Type" @stopCommit="true">
			<property path="name" input="spark.components.TextInput">
				<validations>
					<validation validator="UniqUINameValidator">
						<args>
							<arg property="currentSettings" value="{@currentSettings:}"/>
							<arg property="pageContainerDic" value="{@page:}"/>
							<arg property="uiPartDic" value="{@base:}"/>
							<arg property="tableViewCellDic" value="{@tableviewCell:}"/>
							<arg property="toolbarUiDic" value="{@toolbarUiDic:}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="placeholder" dataType="String" input="spark.components.TextInput" maxlength="50" copyable="true"/>
			<property path="setInputlabel" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="editable" dataType="Boolean" input="spark.components.CheckBox" value="true" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[editable]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[onfocusBackgroundColor]:}" method="hide" value="false" caseOf="true"/>
						<action target="{@form[onfocusBorderColor]:}" method="hide" value="false" caseOf="true"/>
						<action target="{@form[onfocusBackgroundColor]:}" method="hide" value="true" caseOf="false"/>
						<action target="{@form[onfocusBorderColor]:}" method="hide" value="true" caseOf="false"/>
					</when>
				</dependentActions>
			</property>
			<property path="showElevation" dataType="Boolean" input="spark.components.CheckBox" value="false" disable="true"/>
			<property path="hidden" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="taborder" dataType="Number" input="spark.components.NumericStepper" min="0" max="1000" copyable="true"/>
			<property path="customIcon" input="TextInputWithButton"/>
		</type>
		<type name="Items" @stopCommit="true">
			<property path="type" input="spark.components.DropDownList">
				<dataSource>
					<data name="Fixed"/>
					<data name="DB"/>
					<data name="Mixed"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="Fixed" at="initForm, postCommit">
						<action target="{@form[dataarray]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[dataarray[*].text]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[dataarray[*].fieldvalue]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[SelectedIndex]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[ServiceName]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[tablename]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[where]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[sort]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[fieldname]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[displayText]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[initialValue]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="DB" at="initForm, postCommit">
						<action target="{@form[dataarray]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[dataarray[*].text]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[dataarray[*].fieldvalue]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[ServiceName]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[tablename]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[where]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[sort]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[fieldname]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[displayText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[initialValue]:}" method="folded" value="false" caseOf="true"/>		
						<action target="{@form[SelectedIndex]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="Mixed" at="initForm, postCommit">
						<action target="{@form[dataarray]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[dataarray[*].text]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[dataarray[*].fieldvalue]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[SelectedIndex]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[ServiceName]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[tablename]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[where]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[sort]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[fieldname]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[displayText]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[initialValue]:}" method="folded" value="false" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="dataarray" input="spark.components.List" itemClass="com.mobilous.builder.client.lib.adf.uiparts.ComboBoxDataItemDic" labelField="text" valueField="fieldvalue" dragEnabled="true" sortable="false" copyable="true">
				 <dependentActions>
					<when at="initForm, postIndexChange">
					    <action target="{@form[dataarray[*].text]:}" method="setValue" value="{@base:dataarray[@form[dataarray]:selectedIndex].text}"/>
					    <action target="{@form[dataarray[*].text]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[dataarray]:selectedIndex + &quot;].text&quot;}"/>
					    <action target="{@form[dataarray[*].fieldvalue]:}" method="setValue" value="{@base:dataarray[@form[dataarray]:selectedIndex].fieldvalue}"/>
					    <action target="{@form[dataarray[*].fieldvalue]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[dataarray]:selectedIndex + &quot;].fieldvalue&quot;}"/>
					</when>
					<when stopCommit="true" at="initForm, postCommit">
						<action target="{@form[SelectedIndex]:}" method="setMax" value="{@base:dataarray.length - 1}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property formKey="dataarray[*].text" path="dataarray[*].text" input="spark.components.TextInput" copyable="true"/>
			<property formKey="dataarray[*].fieldvalue" path="dataarray[*].fieldvalue" dataType="String" input="spark.components.TextInput" copyable="true"/>
			<property path="SelectedIndex" dataType="Numeric" input="spark.components.NumericStepper" min="0" max="300" inc="1" copyable="true" disable="true"/>
			<property path="ServiceName" input="spark.components.DropDownList">
				<dataSource source="@project:getServices()" labelField="label" valueField="value"/>
				<dependentActions>
					<when at="initForm,postCommit" stopCommit="true">
						<action target="{@form[tablename]:}" method="setOptions" value="{@project:getDbTableDicsByServiceName(@form[ServiceName]:value)}" labelField="tablename" valueField="tablename"/>
						<action target="{@form[tablename]:}" method="setProperty" property="selectedIndex" value="-1"/>
						<action target="{@form[fieldname]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname"/>
					</when>
				</dependentActions>
			</property>
			<property path="tablename" input="spark.components.DropDownList">
				<dataSource source="@project:getDbTableDicsByServiceName(@form[ServiceName]:value)" labelField="tablename" valueField="tablename"/>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[tablename]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[fieldname]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="where" input="spark.components.TextInput" validator="whereClauseValidator"/>
			<property path="sort" input="spark.components.TextInput"/>
			<property path="fieldname" input="spark.components.DropDownList">
				<dependentActions>
					<when at="postCommit, postIndexChange" condition="compare" compareTarget="{@form[fieldname]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[displayText]:}" method="setValue" value="{@form[fieldname]:value}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>	
			<property path="displayText" input="spark.components.TextInput" validator="emptyDisplayText"/>
			<property path="initialValue" input="spark.components.TextInput"/>
			<property path="selectedOptionBGColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
		</type>	
		<type name="Style" @stopCommit="true">
			<property path="backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="backgroundColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
			<property path="borderColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="borderColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
			<property path="borderWeight" dataType="Number" input="spark.components.NumericStepper" min="0" max="10" inc="1" copyable="true"/>
			<property path="cornerRadius" dataType="Number" input="spark.components.NumericStepper" min="0" max="10" inc="1" init="0" copyable="true"/>
			<property path="onfocusBackgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" disable="true"/>			
			<property path="onfocusBorderColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>			
		</type>
	    <type name="Font" @stopCommit="true">
	    	<property path="font.fontName" input="spark.components.DropDownList" dataType="array" init="system" copyable="true">
				<dataSource source="{@base:getFontNames()}" />
			</property>
			<property path="font.fontSize" dataType="Number" input="spark.components.NumericStepper" min="6" max="100" inc="1" init="14" copyable="true"/>
			<property path="font.textColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="font.textAlignment" dataType="custom" input="spark.components.RadioButton" init="left" copyable="true">
				<dataSource>  
					<data name="left" path="left"/>
					<data name="center" path="center"/>
					<data name="right" path="right"/>
				</dataSource>
			</property>
			<property path="verticalAlignment" dataType="custom" input="spark.components.RadioButton" init="middle" copyable="true">
				<dataSource>
					<data name="top" path="top"/>
					<data name="middle" path="middle"/>
					<data name="bottom" path="bottom"/>
				</dataSource>
			</property>
			<property path="placeholderColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
		</type>
		<type name="TextPadding" @stopCommit="true">
			<property path="padding.top" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.left" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.right" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.bottom" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
		</type>
		<type name="Actions">
			<property path="actions.OnSelect" input="LabelWithButton" />			
	    </type>
		<type name="Geometry" @stopCommit="true">
			<property path="frame.x" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.y" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.width" dataType="Number" input="spark.components.NumericStepper" min="50" max="10000" init="150" copyable="true"/>
			<property path="frame.height" dataType="Number" input="spark.components.NumericStepper" min="20" max="10000" init="44" copyable="true"/>
		</type> 
	</properties>
</item>
