<?xml version="1.0" encoding="utf-8"?>
<item targetClass="ListBox" mockup="com.mobilous.builder.client.pageeditor.editor.mockup.ListBox.ListBoxView" visible="true" visibleInTableView="true" imagePath="assets/toolbox/ico_listbox.png" description="Here is the label description"
		>
	<properties>
		<type name="Type" @stopCommit="true">
			<property path="name" input="spark.components.TextInput">
				<validations>
					<validation validator="UniqUINameValidator">
						<args>
							<arg property="currentSettings" value="{@currentSettings:}"/>
							<arg property="pageContainerDic" value="{@page:}"/>
							<arg property="uiPartDic" value="{@base:}"/>
							<arg property="tableViewCellDic" value="{@tableviewCell:}"/>
							<arg property="toolbarUiDic" value="{@toolbarUiDic:}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="backgroundColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
			<property path="borderColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="borderColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
			<property path="borderWeight" dataType="Number" input="spark.components.NumericStepper" min="0" max="10" inc="1" copyable="true"/>
			<property path="hidden" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="taborder" dataType="Number" input="spark.components.NumericStepper" min="0" max="1000" copyable="true"/>
			<property path="type" input="spark.components.DropDownList">
				<dataSource>
					<data name="Fixed"/>
					<data name="DB"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="Fixed" at="initForm, postCommit">
						<action target="{@form[dataarray]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[dataarray[*].text]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[dataarray[*].fieldvalue]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[SelectedValues]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[ServiceName]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[tablename]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[where]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[sort]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[fieldname]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[displayText]:}" method="folded" value="true" caseOf="true"/>	
						<action target="{@form[initialValue]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[type]:value}" compareBy="EQ" compareWith="DB" at="initForm, postCommit">
						<action target="{@form[ServiceName]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[tablename]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[where]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[sort]:}" method="folded" value="false" caseOf="true"/>	
						<action target="{@form[fieldname]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[displayText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[initialValue]:}" method="folded" value="false" caseOf="true"/>		
						<action target="{@form[dataarray]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[dataarray[*].text]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[dataarray[*].fieldvalue]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[SelectedValues]:}" method="folded" value="true" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
		</type>
		<type name="Items" @stopCommit="true">
			<property path="dataarray" input="ListWithMultipleSelection" itemClass="com.mobilous.builder.client.lib.adf.uiparts.ListBoxDataItemDic" labelField="text" copyable="true">
				 <dependentActions>
					<when at="initForm, postIndexChange">
					    <action target="{@form[dataarray[*].text]:}" method="setValue" value="{@base:dataarray[@form[dataarray]:selectedIndex].text}"/>
					    <action target="{@form[dataarray[*].text]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[dataarray]:selectedIndex + &quot;].text&quot;}"/>
					    <action target="{@form[dataarray[*].fieldvalue]:}" method="setValue" value="{@base:dataarray[@form[dataarray]:selectedIndex].fieldvalue}"/>
					    <action target="{@form[dataarray[*].fieldvalue]:}" method="setPath" value="{&quot;dataarray[&quot; + @form[dataarray]:selectedIndex + &quot;].fieldvalue&quot;}"/>
					</when>
				</dependentActions>
			</property>
			<property formKey="dataarray[*].text" path="dataarray[0].text" input="spark.components.TextInput" copyable="true"/>
			<property formKey="dataarray[*].fieldvalue" path="dataarray[0].fieldvalue" dataType="String" input="spark.components.TextInput" copyable="true"/>
			
			<property path="ServiceName" input="spark.components.DropDownList">
				<dataSource source="@project:getServices()" labelField="label" valueField="value"/>
				<dependentActions>
					<when at="initForm,postCommit" stopCommit="true">
						<action target="{@form[tablename]:}" method="setOptions" value="{@project:getDbTableDicsByServiceName(@form[ServiceName]:value)}" labelField="tablename" valueField="tablename" caseOf="true"/>
						<action target="{@form[tablename]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
					</when>
				</dependentActions>
			</property>
			<property path="tablename" input="spark.components.DropDownList">
				<dataSource source="@project:getDbTableDicsByServiceName(@form[ServiceName]:value)" labelField="tablename" valueField="tablename"/>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[tablename]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[fieldname]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="where" input="spark.components.TextInput" validator="whereClauseValidator"/>
			<property path="sort" input="spark.components.TextInput"/>
			<property path="fieldname" input="spark.components.DropDownList">
				<dependentActions>
					<when at="postCommit, postIndexChange" condition="compare" compareTarget="{@form[fieldname]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[displayText]:}" method="setValue" value="{@form[fieldname]:value}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>	
			<property path="displayText" input="spark.components.TextInput" validator="emptyDisplayText"/>
			<property path="initialValue" input="spark.components.TextInput"/>
		</type>	
	    <type name="Font" @stopCommit="true">
			<property path="font.textColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="font.textAlignment" dataType="custom" input="spark.components.RadioButton" init="left" copyable="true">
				<dataSource>
					<data name="left" path="left"/>
					<data name="center" path="center"/>
					<data name="right" path="right"/>
				</dataSource>
			</property>
			<property path="font.fontSize" dataType="Number" input="spark.components.NumericStepper" min="6" max="100" inc="1" init="14" copyable="true"/>
			<property path="verticalAlignment" dataType="custom" input="spark.components.RadioButton" init="middle" copyable="true">
				<dataSource>
					<data name="top" path="top"/>
					<data name="middle" path="middle"/>
					<data name="bottom" path="bottom"/>
				</dataSource>
			</property>
		</type>
		<type name="TextPadding" @stopCommit="true">
			<property path="padding.top" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.left" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.right" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.bottom" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
		</type>
		<type name="Geometry" @stopCommit="true">
			<property path="frame.x" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.y" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.width" dataType="Number" input="spark.components.NumericStepper" min="50" max="10000" init="240" copyable="true"/>
			<property path="frame.height" dataType="Number" input="spark.components.NumericStepper" min="10" max="10000" init="88" copyable="true"/>
		</type> 
	</properties>
</item>
