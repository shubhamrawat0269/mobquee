<?xml version="1.0" encoding="utf-8"?>
<item targetClass="Chart" mockup="com.mobilous.builder.client.pageeditor.editor.mockup.Chart.ChartUI" imagePath="assets/toolbox/ico_chart.png" description=""
		visible="true" visibleInTableView="false" helpLink_EN="" helpLink_JP="">
	<properties>
		<type name="Type" @stopCommit="true">
			<property path="name" input="spark.components.TextInput">
				<validations>
					<validation validator="UniqUINameValidator">
						<args>
							<arg property="currentSettings" value="{@currentSettings:}"/>
							<arg property="pageContainerDic" value="{@page:}"/>
							<arg property="uiPartDic" value="{@base:}"/>
							<arg property="tableViewCellDic" value="{@tableviewCell:}"/>
							<arg property="toolbarUiDic" value="{@toolbarUiDic:}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="toggleFullScreen" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="chartType" input="spark.components.DropDownList" init="Line" sortable="false">
				<dataSource>
					<data name="Line"/>
					<data name="Bar"/>
					<data name="Column"/>
					<data name="Area"/>
					<data name="Pie"/>
					<data name="Donut"/>
					<data name="CandleStick"/>
					<data name="Combo"/>
					<data name="Bubble"/>	 				
					<data name="Scatter"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Line" at="initForm, postCommit">
						<action target="{@form[showCurve]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[showCurve]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[isStacked]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Bar" at="initForm, postCommit">
						<action target="{@form[isStacked]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Column" at="initForm, postCommit">
						<action target="{@form[isStacked]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Area" at="initForm, postCommit">
						<action target="{@form[isStacked]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Pie" at="initForm, postCommit">
						<action target="{@form[is3D]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[is3D]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[isStacked]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Donut" at="initForm, postCommit">
						<action target="{@form[isStacked]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="CandleStick" at="initForm, postCommit">
						<action target="{@form[isWaterfall]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[isWaterfall]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[isStacked]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Combo" at="initForm, postCommit">
						<action target="{@form[isStacked]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Bubble" at="initForm, postCommit">
						<action target="{@form[isStacked]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[styleField]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[annotationField]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[chartType]:value}" compareBy="EQ" compareWith="Scatter" at="initForm, postCommit">
						<action target="{@form[isStacked]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[haxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[vaxisTitle]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[seriesType]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[styleField]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[annotationField]:}" method="folded" value="true" caseOf="true"/>
					</when>					
				</dependentActions>
			</property>
			<property path="showCurve" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="isStacked" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="is3D" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="isWaterfall" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="seriesType" input="spark.components.DropDownList" init="bars">
				<dataSource>
					<data name="line"/>
					<data name="area"/>
					<data name="bars"/>
					<data name="candlesticks"/>				
				</dataSource>
			</property>
			<property path="chartTitle" dataType="String" input="spark.components.TextInput" copyable="true"/>
 			<property path="subTitle" dataType="String" input="spark.components.TextInput" disable="true"/>
			<property path="haxisTitle" dataType="String" input="spark.components.TextInput" copyable="true"/>
 			<property path="vaxisTitle" dataType="String" input="spark.components.TextInput" copyable="true"/>
			<property path="showLegends" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[showLegends]:value}" compareBy="EQ" compareWith="1" at="initForm, postCommit">
						<action target="{@form[legendPosition]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[legendPosition]:}" method="folded" value="true" caseOf="false"/>
					</when>
				</dependentActions>
			</property>
			<property path="legendPosition" input="spark.components.DropDownList" init="right">
				<dataSource>
					<data name="top"/>
					<data name="bottom"/>
					<data name="left"/>
					<data name="right"/>				
				</dataSource>
			</property>
			<property path="hidden" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
		</type>
		
		<type name="Datablocks">
			<property path="ServiceName" input="spark.components.DropDownList">
				<dataSource source="@project:getServices()" labelField="label" valueField="value"/>
				<dependentActions>
					<when at="initForm,postCommit" stopCommit="true">
						<action target="{@form[tablename]:}" method="setOptions" value="{@project:getDbTableDicsByServiceName(@form[ServiceName]:value)}" labelField="tablename" valueField="tablename"/>
						<action target="{@form[tablename]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
					</when>
				</dependentActions>
			</property>
			<property path="tablename" input="spark.components.DropDownList">
				<dataSource source="@project:getDbTableDicsByServiceName(@form[ServiceName]:value)" labelField="tablename" valueField="tablename"/>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[tablename]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[itemField]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[valueField]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[seriesField]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[styleField]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[annotationField]:}" method="setOptions" value="{@project:getBracedDbFields(@form[ServiceName]:value, @form[tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="itemField" input="spark.components.DropDownList"/>
			<property path="valueField" input="ListWithCheckBox" formheight="120"/>
			<property path="seriesField" input="spark.components.DropDownList"/>
			<property path="styleField" input="spark.components.DropDownList"/>
			<property path="annotationField" input="spark.components.DropDownList"/>
			<property path="where" input="spark.components.TextInput" validator="whereClauseValidator"/>
			<property path="sort" input="spark.components.TextInput"/>
		</type>

		<type name="Style" @stopCommit="true">
 			<property path="backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
 			<property path="backgroundColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
 			<property path="borderColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
 			<property path="borderColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
 			<property path="borderWeight" dataType="Number" input="spark.components.NumericStepper" min="0" max="10" inc="1" copyable="true"/>
			<property path="boxShadow" dataType="Boolean" input="spark.components.CheckBox" value="false" disable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[boxShadow]:value}" compareBy="EQ" compareWith="1" at="initForm, postCommit">
						<action target="{@form[boxShadowWidth]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[boxShadowWidth]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[boxShadowColor]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[boxShadowColor]:}" method="folded" value="true" caseOf="false"/>						
					</when>
				</dependentActions>
			</property>
			<property path="boxShadowWidth" input="spark.components.NumericStepper" min="0" max="10" inc="1" disable="true"/>
			<property path="boxShadowColor" dataType="ColorDic" input="mx.controls.ColorPicker" disable="true"/>
		</type>
		
		<type name="Padding" @stopCommit="true">
			<property path="padding.top" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.left" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.right" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
			<property path="padding.bottom" dataType="Number" input="spark.components.NumericStepper" min="0" max="100" inc="1" init="2" copyable="true"/>
		</type>
		<type name="Geometry" @stopCommit="true">
			<property path="frame.x" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.y" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.width" dataType="Number" input="spark.components.NumericStepper" min="240" max="10000" init="300" copyable="true"/>
			<property path="frame.height" dataType="Number" input="spark.components.NumericStepper" min="150" max="10000" init="240" copyable="true"/>
		</type> 
	</properties>
</item>
