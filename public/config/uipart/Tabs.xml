<?xml version="1.0" encoding="utf-8"?>
<item targetClass="Tabs" visible="true" visibleInTableView="true" imagePath="assets/toolbox/ico_header.png" description="Here is the label description"
		helpLink_EN="/" helpLink_JP="/">
	<properties>
		<type name="Type" @stopCommit="true">
			<property path="name" input="spark.components.TextInput">
				<validations>
					<validation validator="UniqUINameValidator">
						<args>
							<arg property="currentSettings" value="{@currentSettings:}"/>
							<arg property="pageContainerDic" value="{@page:}"/>
							<arg property="uiPartDic" value="{@base:}"/>
							<arg property="tableViewCellDic" value="{@tableviewCell:}"/>
							<arg property="toolbarUiDic" value="{@toolbarUiDic:}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="direction" input="spark.components.DropDownList" dataType="array" init="Horizontal" copyable="true" disable="true"> 
				<dataSource>
					<data name="Horizontal" />
				</dataSource>
			</property>
			<property path="initialValue" input="spark.components.TextInput" copyable="true">
				<validations><validation validator="RequiredValueValidator"/></validations>
			</property>			
			<property path="scrollable" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
			<property path="showElevation" dataType="Boolean" input="spark.components.CheckBox" value="false" disable="true"/>
			<property path="enableRipple" dataType="Boolean" input="spark.components.CheckBox" value="false" disable="true"/>
			<property path="hidden" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true"/>
		</type>
		<type name="Style" @stopCommit="true">
			<property path="tintColor" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="borderColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
			<property path="borderColor.alpha" input="spark.components.NumericStepper" min="0.0" max="1.0" inc="0.1" copyable="true"/>
			<property path="cornerRadius" dataType="Number" input="spark.components.NumericStepper" min="0" max="25" inc="1" init="0" copyable="true"/>
		</type>	
		<type name="Items" @stopCommit="true">
			<property path="itemWidth" input="spark.components.NumericStepper" init="80" min="30" max="500" inc="1" copyable="true"/>			
			<property path="itemGap" dataType="Number" input="spark.components.NumericStepper" min="0" max="50" inc="1" init="0" copyable="true"/>
			<property path="tabItems[0].font.textColor" input="mx.controls.ColorPicker" copyable="true"/>
			<property formKey="tabItems" path="tabItems" input="spark.components.List" itemClass="com.mobilous.builder.client.lib.adf.uiparts.SegmentItemDic" labelField="text" copyable="true">
			     <dependentActions>
					<when at="initForm, postIndexChange">
						<action target="{@form[tabItems[*].type]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].type}" chainedEvent="change"/>
						<action target="{@form[tabItems[*].type]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].type&quot;}"/>
						<action target="{@form[tabItems[*].imageDic]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].imageDic}"/>
						<action target="{@form[tabItems[*].imageDic]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].imageDic&quot;}"/>
						<action target="{@form[tabItems[*].text]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].text}"/>
						<action target="{@form[tabItems[*].text]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].text&quot;}"/>
						<action target="{@form[tabItems[*].font.fontName]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].font.fontName}"/>
						<action target="{@form[tabItems[*].font.fontName]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].font.fontName&quot;}"/>
						<action target="{@form[tabItems[*].font.fontSize]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].font.fontSize}"/>
						<action target="{@form[tabItems[*].font.fontSize]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].font.fontSize&quot;}"/>
						<action target="{@form[tabItems[*].font.fontWeight]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].font.fontWeight}"/>
						<action target="{@form[tabItems[*].font.fontWeight]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].font.fontWeight&quot;}"/>
						<action target="{@form[tabItems[*].onTapTintColor]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].onTapTintColor}"/>
						<action target="{@form[tabItems[*].onTapTintColor]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].onTapTintColor&quot;}"/>
						<action target="{@form[tabItems[*].onTapTextColor]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].onTapTextColor}"/>
						<action target="{@form[tabItems[*].onTapTextColor]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].onTapTextColor&quot;}"/>
						<action target="{@form[tabItems[*].onTapFontWeight]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].onTapFontWeight}"/>
						<action target="{@form[tabItems[*].onTapFontWeight]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].onTapFontWeight&quot;}"/>
						<action target="{@form[tabItems[*].actions.clicked]:}" method="setValue" value="{@base:tabItems[@form[tabItems]:selectedIndex].actions.clicked}"/>
						<action target="{@form[tabItems[*].actions.clicked]:}" method="setPath" value="{&quot;tabItems[&quot; + @form[tabItems]:selectedIndex + &quot;].actions.clicked&quot;}"/>
			       </when>
			    </dependentActions>
			</property>
			<property formKey="tabItems[*].type" path="tabItems[*].type" input="spark.components.DropDownList" copyable="true" >
				<dataSource>
					<data name="TextItem"/>
	    		</dataSource>
			    <dependentActions>
			        <when condition="compare" compareTarget="{@form[tabItems[*].type]:value}" compareBy="EQ" compareWith="TextItem" at="initForm, postCommit">
			            <action target="{@form[tabItems[*].text]:}" method="folded" value="false" caseOf="true"/>
			            <action target="{@form[tabItems[*].text]:}" method="folded" value="true" caseOf="false"/>
			            <action target="{@form[tabItems[*].font.fontName]:}" method="folded" value="false" caseOf="true"/>
			            <action target="{@form[tabItems[*].font.fontName]:}" method="folded" value="true" caseOf="false"/>			      
			            <action target="{@form[tabItems[*].font.fontSize]:}" method="folded" value="false" caseOf="true"/>
			            <action target="{@form[tabItems[*].font.fontSize]:}" method="folded" value="true" caseOf="false"/>
			            <action target="{@form[tabItems[*].font.fontWeight]:}" method="folded" value="false" caseOf="true"/>
			            <action target="{@form[tabItems[*].font.fontWeight]:}" method="folded" value="true" caseOf="false"/>
			            <action target="{@form[tabItems[*].onTapTextColor]:}" method="folded" value="false" caseOf="true"/>
			            <action target="{@form[tabItems[*].onTapTextColor]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[tabItems[*].onTapTintColor]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[tabItems[*].onTapTintColor]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[tabItems[*].onTapFontWeight]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[tabItems[*].onTapFontWeight]:}" method="folded" value="true" caseOf="false"/> 
			        </when>
			    </dependentActions>
			</property>
			<property formKey="tabItems[*].text" path="tabItems[*].text" input="spark.components.TextInput" maxlength="75" copyable="true"/>
			<property formKey="tabItems[*].font.fontName" path="tabItems[*].font.fontName" input="spark.components.DropDownList" dataType="array" init="system" copyable="true">
				<dataSource source="{@base:getFontNames()}" />
			</property> 					
			<property formKey="tabItems[*].font.fontSize" path="tabItems[*].font.fontSize" dataType="Numeric" input="spark.components.NumericStepper" min="6" max="300" inc="1" init="12" copyable="true" />
			<property formKey="tabItems[*].font.fontWeight" path="tabItems[*].font.fontWeight" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true" />
			<property formKey="tabItems[*].onTapTextColor" path="tabItems[*].onTapTextColor" input="mx.controls.ColorPicker" />
			<property formKey="tabItems[*].onTapTintColor" path="tabItems[*].onTapTintColor" input="mx.controls.ColorPicker"/> 
			<property formKey="tabItems[*].onTapFontWeight" path="tabItems[*].onTapFontWeight" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true" />
			<property formKey="tabItems[*].actions.clicked" path="tabItems[*].actions.clicked" input="LabelWithButton"/>
			<property path="showsSelectionIndicator" dataType="Boolean" input="spark.components.CheckBox" value="false" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[showsSelectionIndicator]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[indicatorColor]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[indicatorColor]:}" method="folded" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="indicatorColor" dataType="ColorDic" input="mx.controls.ColorPicker" copyable="true"/>
		</type>

		<type name="Geometry" @stopCommit="true">
			<property path="frame.x" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.y" dataType="Number" input="spark.components.NumericStepper" min="0" max="10000" copyable="true"/>
			<property path="frame.width" dataType="Number" input="spark.components.NumericStepper" min="10" max="10000" init="88" copyable="true"/>
			<property path="frame.height" dataType="Number" input="spark.components.NumericStepper" min="5" max="10000" init="44" copyable="true"/>
			<property path="frame.rotation" input="spark.components.NumericStepper" min="0" max="360" inc="5" copyable="true" disable="true"/>
		</type> 
	</properties>
</item>
