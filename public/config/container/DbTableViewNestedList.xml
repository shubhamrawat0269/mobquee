<?xml version="1.0" encoding="utf-8"?>
<item targetClass="DbTableViewNestedList" visible="false" imagePath="assets/toolbox/ico_notExist.png" description="Here is the TableView description">
	<properties>
		<type name="Type">
			<property path="Title" datadataType="String" input="spark.components.TextInput">
				<validations>
					<validation validator="RequiredValueValidator"/>
					<validation validator="UniqPageTitleValidator">
						<args>
							<arg property="projectDic" value="{@project:}"/>
							<arg property="pageid" value="{@base:pageid}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="moduleName" dataType="String" input="spark.components.TextInput">
			</property>
			<property path="srcLocation" dataType="array" input="spark.components.DropDownList" init="bundle">
				<dataSource>
					<data name="bundle"/>
					<data name="remoteFile"/>
				</dataSource>
			</property>
			<property path="backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="backgroundGradient" dataType="String" input="spark.components.TextInput"/>
		</type>		

		<type name="TableViewBase">
			<property path="Children[0].TableStyle" input="spark.components.DropDownList" dataType="array">
				<dataSource>
					<data name="Plain"/>
					<data name="Grouped"/>
				</dataSource>
			</property>
			<property path="Children[0]._tmpCellStyle" input="spark.components.DropDownList" init="custom">
				<dataSource>
					<data name="custom"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="custom" at="initForm, postCommit">
						<action target="{@form[Children[0].rowHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].flexibleHeight]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.height]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.Fields]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainText]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="folded" value="true" caseOf="true"/>				
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="subtitle" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].rowHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].flexibleHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.height]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.Fields]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="default" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="contact-form" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="right-aligned" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="folded" value="true" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].rowHeight" input="spark.components.NumericStepper" min="20" max="1000" copyable="true" init="50">
   			</property> 
			<property path="Children[0].showMultiColumn" input="spark.components.CheckBox" init="0" disable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[Children[0].showMultiColumn]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[Children[0].columnCount]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[Children[0].columnCount]:}" method="folded" value="false" caseOf="false" />
						<action target="{@form[Children[0].columnGap]:}" method="folded" value="true" caseOf="true" />
						<action target="{@form[Children[0].columnGap]:}" method="folded" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].columnCount" input="spark.components.NumericStepper" min="2" max="5" init="2" inc="1" disable="true"/>
    		<property path="Children[0].columnGap" input="spark.components.NumericStepper" min="0" max="10" init="2" inc="1" disable="true"/> 		    		    		
		</type>

		<type name="DBSettings">
			<property path="Children[0].Group[0].ServiceName" input="spark.components.DropDownList">
				<dataSource source="@project:getServices()" labelField="label" valueField="value"/>
				<dependentActions>
					<when at="initForm,postCommit" stopCommit="true">
						<action target="{@form[Children[0].Group[0].tablename]:}" method="setOptions" value="{@project:getDbTableDicsByServiceName(@form[Children[0].Group[0].ServiceName]:value)}" labelField="tablename" valueField="tablename"/>
						<action target="{@form[Children[0].Group[0].tablename]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
					</when>
     				<when at="postCommit, postIndexChange">
     					<action target="{@form[Children[0].Group[0].tablename]:}" method="setValue" value=""/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value')}" labelField="fieldname" valueField="fieldname"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainText]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value)}" labelField="fieldname" valueField="fieldname"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value)}" labelField="fieldname" valueField="fieldname"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="setValue" value="" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainText]:}" method="setValue" value="" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="setValue" value="" /> 						
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].Group[0].tablename" input="spark.components.DropDownList">
				<dataSource source="@project:getDbTableDicsByServiceName(@form[Children[0].Group[0].ServiceName]:value)" labelField="tablename" valueField="tablename"/>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[Children[0].Group[0].tablename]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainText]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.gridFields]:}" method="setOptions" value="{@project:getDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.tabularGridFields]:}" method="setOptions" value="{@project:getDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].Groupby]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, @form[Children[0].Group[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
					</when>
    				<when at="postCommit, postIndexChange">
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainText]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="setValue" value="" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].Group[0].where" input="spark.components.TextInput" validator="whereClauseValidator"/>
			<property path="Children[0].Group[0].sort" input="spark.components.TextInput"/>
			<property path="Children[0].Group[0].flexibleHeight" input="spark.components.CheckBox" init="0" disable="true"/>
		</type>

		<type name="TableCell">
			<property path="Children[0].Group[0].RecordCellDef.mainImage" input="spark.components.ComboBox">
				<dependentActions>
					<when at="initForm, postCommit">
						<action target="{@form[Children[0].rowHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].flexibleHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.height]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.Fields]:}" method="folded" value="true" caseOf="true"/>			
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="custom" at="initForm, postCommit">
						<action target="{@form[Children[0].rowHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].flexibleHeight]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.height]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.Fields]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainText]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="default" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].RecordCellDef.detailText]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="contact-form" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="right-aligned" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].RecordCellDef.mainImage]:}" method="folded" value="true" caseOf="true"/>
					</when>					
				</dependentActions>
			</property>
			
			<property path="Children[0].Group[0].RecordCellDef.mainText" input="spark.components.ComboBox"/>
			<property path="Children[0].Group[0].RecordCellDef.detailText" input="spark.components.ComboBox"/>
			<property path="Children[0].Group[0].RecordCellDef.backgroundColor" input="mx.controls.ColorPicker"/>
			<property path="Children[0].Group[0].RecordCellDef.backgroundGradient" dataType="String" input="spark.components.TextInput"/>
			<property path="Children[0].Group[0].RecordCellDef.alternatingRowStyle" input="spark.components.CheckBox" init="0">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[Children[0].Group[0].RecordCellDef.alternatingRowStyle]:value}" compareBy="EQ" compareWith="1" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].RecordCellDef.backgroundColor]:}" method="hide" value="false" caseOf="true" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.backgroundColor]:}" method="hide" value="true" caseOf="false" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.backgroundGradient]:}" method="hide" value="false" caseOf="true" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.backgroundGradient]:}" method="hide" value="true" caseOf="false" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.alternatingRowColors1]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.alternatingRowColors1]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.alternatingRowColors2]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.alternatingRowColors2]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.alternatingRowImages1]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.alternatingRowImages1]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.alternatingRowImages2]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.alternatingRowImages2]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.rowBGImageRepeat]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].RecordCellDef.rowBGImageRepeat]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].Group[0].RecordCellDef.alternatingRowColors1" input="mx.controls.ColorPicker"/>
			<property path="Children[0].Group[0].RecordCellDef.alternatingRowColors2" input="mx.controls.ColorPicker"/>
			<property path="Children[0].Group[0].RecordCellDef.alternatingRowImages1" input="TextInputWithButton"/>
			<property path="Children[0].Group[0].RecordCellDef.alternatingRowImages2" input="TextInputWithButton"/>
			<property path="Children[0].Group[0].RecordCellDef.rowBGImageRepeat" input="spark.components.CheckBox" init="0"/>			
			<property path="Children[0].Group[0].RecordCellDef.height" input="spark.components.NumericStepper" min="20" max="1000"/>
			<property formKey="Children[0].Group[0].RecordCellDef.Fields" path="Children[0].Group[0].RecordCellDef" input="LabelWithButton" popup="CellEditor">
				<dependentActions>
					<when at="preCommit" stopCommit="true">
						<action target="{@form[Children[0].Group[0].RecordCellDef.Fields]:}" method="{@base:notifyChange()}"/>
					</when>
				</dependentActions>
			</property>			
			<property path="Children[0].Group[0].RecordCellDef.actions.didSelectRowAtIndexPath" input="LabelWithButton"/>
			<property path="Children[0].Group[0].RecordCellDef.actions.flickRL" input="LabelWithButton"/>
			<property path="Children[0].Group[0].RecordCellDef.actions.flickLR" input="LabelWithButton"/>
		</type>
		<type name="TableNestedCell">
		<property path="Children[0].Group[0].SubRecordCellDef.ServiceName" input="spark.components.DropDownList">
				<dataSource source="@project:getServices()" labelField="label" valueField="value"/>
				<dependentActions>
					<when at="initForm,postCommit" stopCommit="true">
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.tablename]:}" method="setOptions" value="{@project:getDbTableDicsByServiceName(@form[Children[0].Group[0].SubRecordCellDef.ServiceName]:value)}" labelField="tablename" valueField="tablename"/>
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.tablename]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
					</when>
     				<when at="postCommit, postIndexChange">
     					<action target="{@form[Children[0].Group[0].SubRecordCellDef.tablename]:}" method="setValue" value=""/>					
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].Group[0].SubRecordCellDef.tablename" input="spark.components.DropDownList">
				<dataSource source="@project:getDbTableDicsByServiceName(@form[Children[0].Group[0].SubRecordCellDef.ServiceName]:value)" labelField="tablename" valueField="tablename"/>				
			</property>
			<property path="Children[0].Group[0].SubRecordCellDef.where" input="spark.components.TextInput" validator="whereClauseValidator"/>
			<property path="Children[0].Group[0].SubRecordCellDef.sort" input="spark.components.TextInput"/>			
			<property path="Children[0].Group[0].SubRecordCellDef.backgroundColor" input="mx.controls.ColorPicker"/>			
			<property path="Children[0].Group[0].SubRecordCellDef.alternatingRowStyle" input="spark.components.CheckBox" init="0">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowStyle]:value}" compareBy="EQ" compareWith="1" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.backgroundColor]:}" method="hide" value="false" caseOf="true" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.backgroundColor]:}" method="hide" value="true" caseOf="false" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowColors1]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowColors1]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowColors2]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowColors2]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowImages1]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowImages1]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowImages2]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.alternatingRowImages2]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.rowBGImageRepeat]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.rowBGImageRepeat]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].Group[0].SubRecordCellDef.alternatingRowColors1" input="mx.controls.ColorPicker"/>
			<property path="Children[0].Group[0].SubRecordCellDef.alternatingRowColors2" input="mx.controls.ColorPicker"/>
			<property path="Children[0].Group[0].SubRecordCellDef.alternatingRowImages1" input="TextInputWithButton"/>
			<property path="Children[0].Group[0].SubRecordCellDef.alternatingRowImages2" input="TextInputWithButton"/>
			<property path="Children[0].Group[0].SubRecordCellDef.rowBGImageRepeat" input="spark.components.CheckBox" init="0"/>			
			<property path="Children[0].Group[0].SubRecordCellDef.height" input="spark.components.NumericStepper" min="20" max="1000"/>
			<property formKey="Children[0].Group[0].SubRecordCellDef.Fields" path="Children[0].Group[0].SubRecordCellDef" input="LabelWithButton" popup="CellEditor">
				<dependentActions>
					<when at="preCommit" stopCommit="true">
						<action target="{@form[Children[0].Group[0].SubRecordCellDef.Fields]:}" method="{@base:notifyChange()}"/>
					</when>
				</dependentActions>
			</property>			
			<property path="Children[0].Group[0].SubRecordCellDef.actions.didSelectRowAtIndexPath" input="LabelWithButton"/>
			<property path="Children[0].Group[0].SubRecordCellDef.actions.flickRL" input="LabelWithButton"/>
			<property path="Children[0].Group[0].SubRecordCellDef.actions.flickLR" input="LabelWithButton"/>
		</type>
		
		<type name="ToolBarTop">
			<property path="toolBarTop.hidden" dataType="Boolean" input="spark.components.CheckBox"  value="0" enabled="true" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarTop.hidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[toolBarTop.frame.height]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarTop.frame.height]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarTop.backgroundColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarTop.backgroundColor]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarTop.backgroundGradient]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarTop.backgroundGradient]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarTop.Children]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarTop.Children]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>			
			<property path="toolBarTop.frame.height" input="spark.components.NumericStepper" min="10" init="40" max="1000"  copyable="true"/>
			<property path="toolBarTop.backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="toolBarTop.backgroundGradient" dataType="String" input="spark.components.TextInput"/>			
			<property path="toolBarTop.Children" input="LabelWithButton" popup="ToolBarEditor"/>
		</type>
		<type name="ToolBarBottom">	
			<property path="toolBarBottom.hidden" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" enabled="true" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarBottom.hidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[toolBarBottom.frame.height]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarBottom.frame.height]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarBottom.backgroundColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarBottom.backgroundColor]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarBottom.backgroundGradient]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarBottom.backgroundGradient]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarBottom.Children]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarBottom.Children]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="toolBarBottom.frame.height" input="spark.components.NumericStepper" min="10" init="40" max="1000"  copyable="true"/>
			<property path="toolBarBottom.backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="toolBarBottom.backgroundGradient" dataType="String" input="spark.components.TextInput"/>			
			<property path="toolBarBottom.Children" input="LabelWithButton" popup="ToolBarEditor"/>
		</type>
		<type name="ToolBarLeft">	
			<property path="toolBarLeft.hidden" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" enabled="true" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarLeft.hidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[toolBarLeft.fixed]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.view]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.frame.width]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.backgroundColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.Children]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.fixed]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.view]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.frame.width]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.frame.height]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.backgroundColor]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.backgroundGradient]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.backgroundGradient]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.Children]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.tableData]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="toolBarLeft.fixed" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" copyable="true"/>
			<property path="toolBarLeft.view" dataType="array" input="spark.components.DropDownList" init="FreeLayout" copyable="true">
				<dataSource>
					<data name="FreeLayout"/>
					<data name="FreeScroll"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarLeft.view]:value}" compareBy="EQ" compareWith="FreeLayout" at="initForm, postCommit">
						<action target="{@form[toolBarLeft.frame.height]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[toolBarLeft.tableData]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[toolBarLeft.view]:value}" compareBy="EQ" compareWith="FreeScroll" at="initForm, postCommit">
						<action target="{@form[toolBarLeft.frame.height]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[toolBarLeft.frame.height]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[toolBarLeft.tableData]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[toolBarLeft.view]:value}" compareBy="EQ" compareWith="TableView" at="initForm, postCommit">
						<action target="{@form[toolBarLeft.tableData]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[toolBarLeft.tableData]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[toolBarLeft.Children]:}" method="folded" value="true" caseOf="true"/>
					</when>			
    			</dependentActions>
			</property>
			<property path="toolBarLeft.frame.width" input="spark.components.NumericStepper" min="50" init="240" max="1000" inc="10" copyable="true"/>
			<property path="toolBarLeft.frame.height" input="spark.components.NumericStepper" min="300" init="480" max="1000" inc="10" copyable="true"/>
			<property path="toolBarLeft.backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="toolBarLeft.backgroundGradient" dataType="String" input="spark.components.TextInput"/>			
			<property path="toolBarLeft.Children" input="LabelWithButton" popup="ToolBarEditor"/>
			<property path="toolBarLeft.tableData" input="LabelWithButton" popup="TableViewEditor"/>
		</type>
		<type name="ToolBarRight"> 
			<property path="toolBarRight.hidden" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" enabled="true" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarRight.hidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[toolBarRight.fixed]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarRight.view]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarRight.frame.width]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarRight.backgroundColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarRight.backgroundGradient]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarRight.Children]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarRight.fixed]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarRight.view]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarRight.frame.width]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarRight.frame.height]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarRight.backgroundColor]:}" method="hide" value="false" caseOf="false" />						
						<action target="{@form[toolBarRight.backgroundGradient]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarRight.Children]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarRight.tableData]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="toolBarRight.fixed" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" copyable="true"/>
			<property path="toolBarRight.view" input="spark.components.DropDownList" init="FreeLayout" copyable="true">
				<dataSource>
					<data name="FreeLayout"/>
					<data name="FreeScroll"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarRight.view]:value}" compareBy="EQ" compareWith="FreeLayout" at="initForm, postCommit">
						<action target="{@form[toolBarRight.frame.height]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[toolBarRight.frame.height]:}" method="folded" value="false" caseOf="false"/>
					</when>			
					<when condition="compare" compareTarget="{@form[toolBarRight.view]:value}" compareBy="EQ" compareWith="FreeScroll" at="initForm, postCommit">
						<action target="{@form[toolBarRight.frame.height]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[toolBarRight.frame.height]:}" method="folded" value="false" caseOf="true"/>
					</when>
    			</dependentActions>
			</property>
			<property path="toolBarRight.frame.width" input="spark.components.NumericStepper" min="50" init="240" max="1000" inc="10" copyable="true"/>
			<property path="toolBarRight.frame.height" input="spark.components.NumericStepper" min="300" init="480" max="1000" inc="10" copyable="true"/>
			<property path="toolBarRight.backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="toolBarRight.backgroundGradient" dataType="String" input="spark.components.TextInput"/>			
			<property path="toolBarRight.Children" input="LabelWithButton" popup="ToolBarEditor"/>
		</type>
		
		<type name="PageOverlay">	
			<property path="pageOverlay.Children" input="LabelWithButton" popup="ToolBarEditor" source="overlay"/>
		</type>

		<type name="Actions">
			<property path="actions.swipeLR" input="LabelWithButton" />
			<property path="actions.swipeRL" input="LabelWithButton" />	
			<property path="actions.beforeViewPage" input="LabelWithButton" />
			<property path="actions.afterViewPage" input="LabelWithButton" />
			<property path="actions.becameAwake" input="LabelWithButton" />
		</type>

	</properties>
</item>
