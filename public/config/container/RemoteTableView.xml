<?xml version="1.0" encoding="utf-8"?>
<item targetClass="RemoteTableView" visible="false" imagePath="assets/toolbox/ico_notExist.png" description="Here is the TableView description">
	<properties>
		<type name="Type">
			<property path="Title" datadataType="String" input="spark.components.TextInput">
				<validations>
					<validation validator="RequiredValueValidator"/>
					<validation validator="UniqPageTitleValidator">
						<args>
							<arg property="projectDic" value="{@project:}"/>
							<arg property="pageid" value="{@base:pageid}"/>
						</args>
					</validation>
				</validations>
			</property>
			<property path="moduleName" dataType="String" input="spark.components.TextInput">
			</property>
			<property path="srcLocation" dataType="array" input="spark.components.DropDownList" init="bundle">
				<dataSource>
					<data name="bundle"/>
					<data name="remoteFile"/>
				</dataSource>
			</property>
			<property path="backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
		</type>

		<type name="StatusBar">
			<property path="StatusBarHidden" dataType="Boolean" input="spark.components.CheckBox" init="1" />
		</type>

		<type name="NavigationBar">
			<property path="NavigationBarHidden" dataType="Boolean" input="spark.components.CheckBox" init="1" value="0">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[NavigationBarHidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[navigationBar.title]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.title]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.prompt]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.prompt]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.tintColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.tintColor]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.leftBarButton.type]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.leftBarButton.type]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.leftBarButton.systemItem]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.leftBarButton.systemItem]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.leftBarButton.text]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.leftBarButton.text]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.leftBarButton.actions.clicked]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.leftBarButton.actions.clicked]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.rightBarButton.type]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.rightBarButton.type]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.rightBarButton.systemItem]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.rightBarButton.systemItem]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.rightBarButton.text]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.rightBarButton.text]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.rightBarButton.actions.clicked]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[navigationBar.rightBarButton.actions.clicked]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.barStyle]:}" method="hide" value="true" caseOf="true" />
						<action method="dependentConditions" caseOf="false">
							<when condition="compare" compareTarget="{@form[TabBarHidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
								<action target="{@form[navigationBar.barStyle]:}" method="hide" value="true" caseOf="true" />
								<action target="{@form[navigationBar.barStyle]:}" method="hide" value="false" caseOf="false" />
							</when>
						</action>
					</when>
				</dependentActions>
			</property>
			<property path="navigationBar.barStyle" dataType="array" input="spark.components.DropDownList" init="Default" copyable="true">
				<dataSource>
					<data name="Default"/>
					<data name="BlackOpaque"/>
					<data name="BlackTranslucent"/>
					<data name="Translucent"/>
					<data name="Custom"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[navigationBar.barStyle]:value}" compareBy="EQ" compareWith="Custom" at="initForm, postCommit">
						<action target="{@form[navigationBar.tintColor]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[navigationBar.tintColor]:}" method="folded" value="true" caseOf="false" />
						<action target="{@form[TabBase.tintColor]:}" method="folded" value="false" caseOf="true" />
						<action target="{@form[TabBase.tintColor]:}" method="folded" value="true" caseOf="false" />
					</when>			
    			</dependentActions>
			</property>
			<property path="navigationBar.tintColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0" copyable="true"/>
			<property path="navigationBar.title" datadataType="String" input="spark.components.TextInput" copyable="true"/>						
			<property path="navigationBar.prompt" datadataType="String" input="spark.components.TextInput" copyable="true"/>						
			<property path="navigationBar.leftBarButton.type" input="spark.components.DropDownList" copyable="true">
				<dataSource>
					<data name=" "/>
					<data name="SystemItem"/>
					<data name="TextItem"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[navigationBar.leftBarButton.type]:value}" compareBy="EQ" compareWith="None" at="initForm, postCommit">
						<action target="{@form[none]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[navigationBar.leftBarButton.actions.clicked]:}" method="folded" value="true" caseOf="false"/>
					</when>
					<when condition="compare" compareTarget="{@form[navigationBar.leftBarButton.type]:value}" compareBy="EQ" compareWith=" " at="initForm, postCommit">
						<action target="{@form[navigationBar.leftBarButton.actions.clicked]:}" method="folded" value="true" caseOf="true"/>
					</when>
				    <when condition="compare" compareTarget="{@form[navigationBar.leftBarButton.type]:value}" compareBy="EQ" compareWith="SystemItem" at="initForm, postCommit">
						<action target="{@form[navigationBar.leftBarButton.systemItem]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[navigationBar.leftBarButton.systemItem]:}" method="folded" value="false" caseOf="true"/>
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[navigationBar.leftBarButton.systemItem]:value}" compareBy="EQ" compareWith="" at="initForm, postCommit">
								<action target="{@form[navigationBar.leftBarButton.actions.clicked]:}" method="folded" value="true" caseOf="true"/>
								<action target="{@form[navigationBar.leftBarButton.actions.clicked]:}" method="folded" value="false" caseOf="false"/>
							</when>
						</action>
					</when>
					<when condition="compare" compareTarget="{@form[navigationBar.leftBarButton.type]:value}" compareBy="EQ" compareWith="TextItem" at="initForm, postCommit">
						<action target="{@form[navigationBar.leftBarButton.text]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[navigationBar.leftBarButton.text]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[navigationBar.leftBarButton.actions.clicked]:}" method="folded" value="false" caseOf="true"/>
					</when>			
    			</dependentActions>
			</property>
			<property path="navigationBar.leftBarButton.systemItem" input="spark.components.DropDownList" copyable="true">
				<dataSource>
					<data name="add"/>
					<data name="action"/>
					<data name="back"/>
					<data name="bookmark"/>
					<data name="camera"/>
					<data name="compose"/>
					<data name="fast-forward"/>
					<data name="organize"/>
					<data name="page-curl"/>
					<data name="pause"/>
					<data name="play"/>
					<data name="refresh"/>
					<data name="reply"/>
					<data name="rewind"/>
					<data name="search"/>
					<data name="settings"/>
					<data name="stop"/>
					<data name="trash"/>
				</dataSource>	
				<dependentActions>
					<when at="postCommit, postIndexChange">
						<action target="{@form[navigationBar.leftBarButton.actions.clicked]:}" method="folded" value="false"/>
			       </when>
    			</dependentActions>
			</property>
			<property path="navigationBar.leftBarButton.text" input="spark.components.TextInput" copyable="true"/>
			<property formKey="none" input="spark.components.DropDownList"/>
			<property path="navigationBar.leftBarButton.actions.clicked" input="LabelWithButton" copyable="true"/>
			<property path="navigationBar.rightBarButton.type" input="spark.components.DropDownList" copyable="true">
				<dataSource>
					<data name=" "/>
					<data name="SystemItem"/>
					<data name="TextItem"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[navigationBar.rightBarButton.type]:value}" compareBy="EQ" compareWith="None" at="initForm, postCommit">
						<action target="{@form[none]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[navigationBar.rightBarButton.actions.clicked]:}" method="folded" value="true" caseOf="false"/>
					</when>
					<when condition="compare" compareTarget="{@form[navigationBar.rightBarButton.type]:value}" compareBy="EQ" compareWith=" " at="initForm, postCommit">
						<action target="{@form[navigationBar.rightBarButton.actions.clicked]:}" method="folded" value="true" caseOf="true"/>
					</when>
				    <when condition="compare" compareTarget="{@form[navigationBar.rightBarButton.type]:value}" compareBy="EQ" compareWith="SystemItem" at="initForm, postCommit">
						<action target="{@form[navigationBar.rightBarButton.systemItem]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[navigationBar.rightBarButton.systemItem]:}" method="folded" value="false" caseOf="true"/>
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[navigationBar.rightBarButton.systemItem]:value}" compareBy="EQ" compareWith="" at="initForm, postCommit">
								<action target="{@form[navigationBar.rightBarButton.actions.clicked]:}" method="folded" value="true" caseOf="true"/>
								<action target="{@form[navigationBar.rightBarButton.actions.clicked]:}" method="folded" value="false" caseOf="false"/>
							</when>
						</action>
					</when>
					<when condition="compare" compareTarget="{@form[navigationBar.rightBarButton.type]:value}" compareBy="EQ" compareWith="TextItem" at="initForm, postCommit">
						<action target="{@form[navigationBar.rightBarButton.text]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[navigationBar.rightBarButton.text]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[navigationBar.rightBarButton.actions.clicked]:}" method="folded" value="false" caseOf="true"/>
					</when>			
    			</dependentActions>
			</property>
			<property path="navigationBar.rightBarButton.systemItem" input="spark.components.DropDownList" copyable="true">
				<dataSource>
					<data name="add"/>
					<data name="action"/>
					<data name="back"/>
					<data name="bookmark"/>
					<data name="camera"/>
					<data name="compose"/>
					<data name="fast-forward"/>
					<data name="organize"/>
					<data name="page-curl"/>
					<data name="pause"/>
					<data name="play"/>
					<data name="refresh"/>
					<data name="reply"/>
					<data name="rewind"/>
					<data name="search"/>
					<data name="settings"/>
					<data name="stop"/>
					<data name="trash"/>
				</dataSource>
				<dependentActions>
					<when at="postCommit, postIndexChange">
						<action target="{@form[navigationBar.rightBarButton.actions.clicked]:}" method="folded" value="false"/>
			       </when>
    			</dependentActions>
			</property>
			<property path="navigationBar.rightBarButton.text" input="spark.components.TextInput" copyable="true"/>
			<property path="navigationBar.rightBarButton.actions.clicked" input="LabelWithButton" copyable="true"/>
		</type>

		<type name="TableViewBase">
			<property path="Children[0].TableStyle" input="spark.components.DropDownList" dataType="array">
				<dataSource>
					<data name="Plain"/>
					<data name="Grouped"/>
				</dataSource>
			</property>
			<property path="Children[0]._tmpCellStyle" input="spark.components.DropDownList" init="custom">
				<dataSource>
					<data name="custom"/>
					<data name="default"/>
					<data name="subtitle"/>
					<data name="right-aligned"/>
					<data name="contact-form"/>
				</dataSource>
				<dependentActions>
					<when at="initForm, postCommit">
						<action target="{@form[Children[0].rowHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].flexibleHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].height]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].Fields]:}" method="folded" value="true" caseOf="true"/>						
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="custom" at="initForm, postCommit">
						<action target="{@form[Children[0].rowHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[0].flexibleHeight]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].height]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].Fields]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="default" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="contact-form" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="right-aligned" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="folded" value="true" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].rowHeight" input="spark.components.NumericStepper" min="20" max="1000" copyable="true" init="50">
			</property>
			<property path="Children[0].Group[0].flexibleHeight" input="spark.components.CheckBox" init="0"/>
		</type>
		<type name="DBSettings">
			<property path="Children[0].ServiceName" input="spark.components.DropDownList">
				<dataSource source="@project:getServices()" labelField="label" valueField="value"/>
				<dependentActions>
					<when at="initForm,postCommit" stopCommit="true">
						<action target="{@form[Children[0].tablename]:}" method="setOptions" value="{@project:getDbTableDicsByServiceName(@form[Children[0].ServiceName]:value)}" labelField="tablename" valueField="tablename" caseOf="true"/>
						<action target="{@form[Children[0].tablename]:}"  method="setProperty" property="selectedIndex" value="-1" caseOf="true"/> 
					</when>
     				<when at="postCommit, postIndexChange">
     					<action target="{@form[Children[0].tablename]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].fieldname]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, '')}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, '')}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, '')}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].Group[0].ServiceName]:value, '')}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].fieldname]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="setValue" value="" caseOf="true"/> 
					</when>
				</dependentActions>
			</property>
			
			<property path="Children[0].tablename" input="spark.components.DropDownList">
				<dataSource source="@project:getDbTableDicsByServiceName(@base:Children[0].ServiceName)" labelField="tablename" valueField="tablename"/>
				<dependentActions>
					<when at="initForm, postCommit" condition="compare" compareTarget="{@form[Children[0].tablename]:value}" compareBy="NE" compareWith="">						
						<action target="{@form[Children[0].Group[*].rowarray[*].fieldname]:}" method="setOptions" value="{@project:getDbFields(@form[Children[0].ServiceName]:value, @form[Children[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].ServiceName]:value, @form[Children[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].ServiceName]:value, @form[Children[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>						
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="setOptions" value="{@project:getBracedDbFields(@form[Children[0].ServiceName]:value, @form[Children[0].tablename]:value)}" labelField="fieldname" valueField="fieldname" caseOf="true"/>
					</when>
    				<when at="postCommit, postIndexChange">
						<action target="{@form[Children[0].Group[*].rowarray[*].fieldname]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="setValue" value="" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="setValue" value="" caseOf="true"/>						
					</when>
				</dependentActions>
			</property>
			<property path="Children[0].where" input="spark.components.TextInput" validator="whereClauseValidator"/>
		</type>

		<type name="TableGroup">
			<property path="Children[0].Group.length" input="spark.components.NumericStepper" min="1" max="99">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[Children[0].Group.length]:value}" compareBy="GT" compareWith="{@base:Children[0].Group.length}" stopCommit="true" at="preCommit">
						<action target="{@form[Children[0].Group.length]:}" method="{@base:Children[0].addOneGroup()}" caseOf="true"/>
						<action target="{@form[Children[0].Group.length]:}" method="setValue" value="{@base:Children[0].Group.length}" caseOf="true"/>
					</when>

					<when condition="compare" compareTarget="{@form[Children[0].Group.length]:value}" compareBy="LT" compareWith="{@base:Children[0].Group.length}" stopCommit="true" at="preCommit">
						<action target="{@form[Children[0].Group.length]:}" method="{@base:Children[0].removeOneGroup()}" caseOf="true"/>
						<action target="{@form[Children[0].Group.length]:}" method="setValue" value="{@base:Children[0].Group.length}" caseOf="true"/>
					</when>

					<when condition="compare" compareTarget="{@form[Children[0].Group.length]:value}" compareBy="LE" compareWith="{@form[IndexOfGroup]:value}" stopCommit="true" at="postCommit">
						<action target="{@form[IndexOfGroup]:}" method="setValue" value="{@base:Children[0].Group.length - 1}" caseOf="true" chainedEvent="change"/>
					</when>

					<when condition="onChange" stopCommit="true" at="initForm, postCommit">
						<action target="{@form[IndexOfGroup]:}" method="setMax" value="{@base:Children[0].Group.length - 1}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>

			<property formKey="IndexOfGroup" input="spark.components.NumericStepper" min="0" max="9" init="0">
				<dependentActions>
					<when stopCommit="true" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[*].Title]:}" method="setValue" value="{@base:Children[0].Group[@form[IndexOfGroup]:value].Title}" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].Title]:}" method="setPath" value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].Title&quot;}" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray]:}" method="setValue" value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray}" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray]:}" method="setPath" value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray&quot;}" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray]:}" method="setProperty" property="selectedIndex" value="0" caseOf="true" chainedEvent="indexChange"/>
						<action target="{@form[Children[0].Group[*].Footer]:}" method="setValue" value="{@base:Children[0].Group[@form[IndexOfGroup]:value].Footer}" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].Footer]:}" method="setPath" value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].Footer&quot;}" caseOf="true"/>
					</when>
				</dependentActions>
			</property>

			<property formKey="Children[0].Group[*].Title" path="Children[0].Group[0].Title" input="spark.components.TextInput"/>

			<property formKey="Children[0].Group[*].rowarray" path="Children[0].Group[0].rowarray" input="spark.components.List" itemClass="com.mobilous.builder.client.lib.adf.uiparts.TableViewCellDic" dragEnabled="true" labelField="fieldname">
				<dependentActions>
					<when at="initForm, postIndexChange">
						<action target="{@form[Children[0].Group[*].rowarray[*].fieldname]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].fieldname&quot;}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].fieldname]:}" method="setValue" 
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].fieldname}"/>

						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="setPath" 
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].mainImage&quot;}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="setValue" 
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].mainImage}"/>

						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].mainText}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].mainText&quot;}"/>

						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].detailText}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].detailText&quot;}"/>

						<action target="{@form[Children[0].Group[*].rowarray[*].height]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].height}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].height]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].height&quot;}"/>
								
						<action target="{@form[Children[0].Group[*].rowarray[*].backgroundColor]:}" method="setValue" 
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].backgroundColor}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].backgroundColor]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].backgroundColor&quot;}"/>		

						<action target="{@form[Children[0].Group[*].rowarray[*].Fields]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex]}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].Fields]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;]&quot;}"/>

						<action target="{@form[Children[0].Group[*].rowarray[*].editingAccessoryType]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].editingAccessoryType}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].editingAccessoryType]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].editingAccessoryType&quot;}"/>

						<action target="{@form[Children[0].Group[*].rowarray[*].actions.accessoryButtonTappedForRowWithIndexPath]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].actions.accessoryButtonTappedForRowWithIndexPath}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.accessoryButtonTappedForRowWithIndexPath]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].actions.accessoryButtonTappedForRowWithIndexPath&quot;}"/>

						<action target="{@form[Children[0].Group[*].rowarray[*].actions.didSelectRowAtIndexPath]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].actions.didSelectRowAtIndexPath}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.didSelectRowAtIndexPath]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].actions.didSelectRowAtIndexPath&quot;}"/>
								
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.flickRL]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].actions.flickRL}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.flickRL]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].actions.flickRL&quot;}"/>
						
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.flickLR]:}" method="setValue"
								value="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex].actions.flickLR}"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.flickLR]:}" method="setPath"
								value="{&quot;Children[0].Group[&quot; + @form[IndexOfGroup]:value + &quot;].rowarray[&quot; + @form[Children[0].Group[*].rowarray]:selectedIndex + &quot;].actions.flickLR&quot;}"/>
					</when>
					
					<when at="initForm, postIndexChange" condition="compare" compareTarget="{@form[Children[0].Group[*].rowarray[*].editingAccessoryType]:value}" compareBy="EQ" compareWith="button">
     					<action target="{@form[Children[0].Group[*].rowarray[*].actions.accessoryButtonTappedForRowWithIndexPath]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.accessoryButtonTappedForRowWithIndexPath]:}" method="folded" value="true" caseOf="false"/>
					</when>
					<when at="postCommit">
						<action target="{@base:Children[0].Group[@form[IndexOfGroup]:value].rowarray[@form[Children[0].Group[*].rowarray]:selectedIndex]}" method="setProperty"
								property="CellStyle" value="{@form[Children[0]._tmpCellStyle]:value}"/>
					</when>
				</dependentActions>			
			</property>

			<property formKey="Children[0].Group[*].Footer" path="Children[0].Group[0].Footer" input="spark.components.TextInput"/>
		</type>

		<type name="TableCell">
			<property formKey="Children[0].Group[*].rowarray[*].fieldname" path="Children[0].Group[0].rowarray[0].fieldname" input="spark.components.ComboBox">
				<dependentActions>
					<when at="postCommit">
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="setValue" value="{@form[Children[0].Group[*].rowarray[*].fieldname]:value}"/>
					</when>
				</dependentActions>
			</property>
			<property formKey="Children[0].Group[*].rowarray[*].mainImage" path="Children[0].Group[0].rowarray[0].mainImage" input="spark.components.ComboBox">
				<dependentActions>
					<when at="initForm, postCommit">
						<action target="{@form[Children[0].rowHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].height]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].Fields]:}" method="folded" value="true" caseOf="true"/>						
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="custom" at="initForm, postCommit">
						<action target="{@form[Children[0].rowHeight]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].height]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].Fields]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].mainText]:}" method="folded" value="true" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="default" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[*].rowarray[*].detailText]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="contact-form" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="folded" value="true" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[Children[0]._tmpCellStyle]:value}" compareBy="EQ" compareWith="right-aligned" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[*].rowarray[*].mainImage]:}" method="folded" value="true" caseOf="true"/>
					</when>
				</dependentActions>
			</property>
			<property formKey="Children[0].Group[*].rowarray[*].mainText" path="Children[0].Group[0].rowarray[0].mainText" input="spark.components.ComboBox"/>
			<property formKey="Children[0].Group[*].rowarray[*].detailText" path="Children[0].Group[0].rowarray[0].detailText" input="spark.components.ComboBox"/>
			<property formKey="Children[0].Group[*].rowarray[*].backgroundColor" path="Children[0].Group[0].rowarray[0].backgroundColor" input="mx.controls.ColorPicker"/>
			<property formKey="Children[0].Group[*].rowarray[*].height" path="Children[0].Group[0].rowarray[0].height" input="spark.components.NumericStepper" min="20" max="1000"/>			
			<property formKey="Children[0].Group[*].rowarray[*].Fields" path="Children[0].Group[0].rowarray[0]" input="LabelWithButton" popup="CellEditor">
				<dependentActions>
					<when at="preCommit" stopCommit="true">
						<action target="{@form[Children[0].Group[*].rowarray[*].Fields]:}" method="{@base:notifyChange()}"/>
					</when>
				</dependentActions>
			</property>

			<property formKey="Children[0].Group[*].rowarray[*].editingAccessoryType" path="Children[0].Group[0].rowarray[0].editingAccessoryType" input="spark.components.DropDownList">
				<dataSource>
					<data name="indicator"/>
					<data name="button"/>
					<data name="none"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[Children[0].Group[*].rowarray[*].editingAccessoryType]:value}" compareBy="EQ" compareWith="button" at="initForm, postCommit">
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.accessoryButtonTappedForRowWithIndexPath]:}" method="folded" value="false" caseOf="true"/>
						<action target="{@form[Children[0].Group[*].rowarray[*].actions.accessoryButtonTappedForRowWithIndexPath]:}" method="folded" value="true" caseOf="false"/>
					</when>	
				</dependentActions>
			</property>
			<property formKey="Children[0].Group[*].rowarray[*].actions.accessoryButtonTappedForRowWithIndexPath" path="Children[0].Group[0].rowarray[0].actions.accessoryButtonTappedForRowWithIndexPath" input="LabelWithButton"/>
			<property formKey="Children[0].Group[*].rowarray[*].actions.didSelectRowAtIndexPath" path="Children[0].Group[0].rowarray[0].actions.didSelectRowAtIndexPath" input="LabelWithButton"/>
			<property formKey="Children[0].Group[*].rowarray[*].actions.flickRL" path="Children[0].Group[0].rowarray[0].actions.flickRL" input="LabelWithButton"/>
			<property formKey="Children[0].Group[*].rowarray[*].actions.flickLR" path="Children[0].Group[0].rowarray[0].actions.flickLR" input="LabelWithButton"/>
		</type>
		
		<type name="ToolBarTop">
			<property path="toolBarTop.hidden" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" enabled="true" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarTop.hidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[toolBarTop.frame.height]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarTop.frame.height]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarTop.backgroundColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarTop.backgroundColor]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarTop.Children]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarTop.Children]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>			
			<property path="toolBarTop.frame.height" input="spark.components.NumericStepper" min="10" init="44" max="1000"  copyable="true"/>
			<property path="toolBarTop.backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="toolBarTop.Children" input="LabelWithButton" popup="ToolBarEditor"/>
		</type>
		<type name="ToolBarBottom">	
			<property path="toolBarBottom.hidden" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" enabled="true" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarBottom.hidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[toolBarBottom.frame.height]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarBottom.frame.height]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarBottom.backgroundColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarBottom.backgroundColor]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarBottom.Children]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarBottom.Children]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="toolBarBottom.frame.height" input="spark.components.NumericStepper" min="10" init="44" max="1000"  copyable="true"/>
			<property path="toolBarBottom.backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="toolBarBottom.Children" input="LabelWithButton" popup="ToolBarEditor"/>
		</type>
		<type name="ToolBarLeft">	
			<property path="toolBarLeft.hidden" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" enabled="true" copyable="true">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarLeft.hidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[toolBarLeft.fixed]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.fixed]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.view]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.view]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.frame.width]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.frame.width]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.frame.height]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.frame.height]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.backgroundColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.backgroundColor]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.Children]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.Children]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[toolBarLeft.tableData]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[toolBarLeft.tableData]:}" method="hide" value="false" caseOf="false" />
					</when>
				</dependentActions>
			</property>
			<property path="toolBarLeft.fixed" dataType="Boolean" input="spark.components.CheckBox" init="" value="0" copyable="true"/>
			<property path="toolBarLeft.view" dataType="array" input="spark.components.DropDownList" init="FreeLayout" copyable="true">
				<dataSource>
					<data name="FreeLayout"/>
					<data name="FreeScroll"/>
					<data name="TableView"/>
				</dataSource>
				<dependentActions>
					<when condition="compare" compareTarget="{@form[toolBarLeft.view]:value}" compareBy="EQ" compareWith="FreeScroll" at="initForm, postCommit">
						<action target="{@form[toolBarLeft.frame.height]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[toolBarLeft.frame.height]:}" method="folded" value="false" caseOf="true"/>
					</when>
					<when condition="compare" compareTarget="{@form[toolBarLeft.view]:value}" compareBy="EQ" compareWith="TableView" at="initForm, postCommit">
						<action target="{@form[toolBarLeft.tableData]:}" method="folded" value="true" caseOf="false"/>
						<action target="{@form[toolBarLeft.tableData]:}" method="folded" value="false" caseOf="true"/>
					</when>			
    			</dependentActions>
			</property>
			<property path="toolBarLeft.frame.width" input="spark.components.NumericStepper" min="50" init="240" max="1000" inc="10" copyable="true"/>
			<property path="toolBarLeft.frame.height" input="spark.components.NumericStepper" min="300" init="480" max="1000" inc="10" copyable="true"/>
			<property path="toolBarLeft.backgroundColor" dataType="ColorDic" input="mx.controls.ColorPicker" init="0"/>
			<property path="toolBarLeft.Children" input="LabelWithButton" popup="ToolBarEditor"/>
			<property path="toolBarLeft.tableData" input="LabelWithButton" popup="TableViewEditor"/>
		</type>
		
		<type name="TabBar">
			<property path="TabBarHidden" input="spark.components.CheckBox" init="" copyable="true" value="0">
				<dependentActions>
					<when condition="compare" compareTarget="{@form[TabBarHidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
						<action target="{@form[TabBase.tintColor]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[TabBase.tintColor]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[TabBase.icontitle]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[TabBase.icontitle]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[TabBase.icon.fileDic]:}" method="hide" value="true" caseOf="true" />
						<action target="{@form[TabBase.icon.fileDic]:}" method="hide" value="false" caseOf="false" />
						<action target="{@form[navigationBar.barStyle]:}" method="hide" value="true" caseOf="true" />
						<action method="dependentConditions" caseOf="true">
							<when condition="compare" compareTarget="{@form[navigationBar.barStyle]:value}" compareBy="EQ" compareWith="Custom" at="initForm, postCommit">
								<action target="{@form[TabBase.tintColor]:}" method="folded" value="false" caseOf="true" />
								<action target="{@form[TabBase.tintColor]:}" method="folded" value="true" caseOf="false" />
							</when>
						</action>
						<action method="dependentConditions" caseOf="false">
							<when condition="compare" compareTarget="{@form[navigationBar.barStyle]:value}" compareBy="EQ" compareWith="Custom" at="initForm, postCommit">
								<action target="{@form[TabBase.tintColor]:}" method="folded" value="false" caseOf="true" />
								<action target="{@form[TabBase.tintColor]:}" method="folded" value="true" caseOf="false" />
							</when>
							<when condition="compare" compareTarget="{@form[NavigationBarHidden]:value}" compareBy="EQ" compareWith="0" at="initForm, postCommit">
								<action target="{@form[navigationBar.barStyle]:}" method="hide" value="true" caseOf="true" />
								<action target="{@form[navigationBar.barStyle]:}" method="hide" value="false" caseOf="false" />
							</when>
						</action>
					</when>
				</dependentActions>
			</property>
			<property path="TabBase.tintColor" input="mx.controls.ColorPicker" init="0"/>
			<property path="TabBase.icontitle" input="spark.components.TextInput"/>
			<property path="TabBase.icon.fileDic" input="TextInputWithButton"/>
		</type>
		<type name="PageOverlay">	
			<property path="pageOverlay.Children" input="LabelWithButton" popup="ToolBarEditor" source="overlay"/>
		</type>

		<type name="Actions">
			<property path="actions.swipeLR" input="LabelWithButton" />
			<property path="actions.swipeRL" input="LabelWithButton" />		
			<property path="actions.beforeViewPage" input="LabelWithButton" />
			<property path="actions.afterViewPage" input="LabelWithButton" />
			<property path="actions.becameAwake" input="LabelWithButton" />
		</type>

	</properties>
</item>
